<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Alquicira Hernandez on Jose Alquicira Hernandez</title>
    <link>/</link>
    <description>Recent content in Jose Alquicira Hernandez on Jose Alquicira Hernandez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +1000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to scPred</title>
      <link>/post/introduction-to-scpred/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-scpred/</guid>
      <description>


&lt;div id=&#34;summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;scPred&lt;/code&gt; is a general method to predict cell types based on variance structure decomposition. It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.&lt;/p&gt;
&lt;p&gt;For more details see our pre-print on &lt;strong&gt;bioRxiv&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.biorxiv.org/content/early/2018/12/03/369538&#34;&gt;scPred: Single cell prediction using singular value decomposition and machine learning classification&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;application-of-scpred&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Application of &lt;code&gt;scPred&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;First, we load the &lt;code&gt;scPred&lt;/code&gt; package, and &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;scPred&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will work with single cell data from pluripotent, blood, skin and neural cells sequenced at low coverage. For more details about the study, see &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/25086649&#34;&gt;Low-coverage single-cell mRNA sequencing reveals cellular heterogeneity and activated signaling pathways in developing cerebral cortex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The count matrix and metadata may be obtained &lt;a href=&#34;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds&#34;&gt;here&lt;/a&gt; from Hemberg’s &lt;a href=&#34;https://hemberg-lab.github.io/scRNA.seq.datasets&#34;&gt;lab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read the gene expression data (&lt;code&gt;SingleCellExperiment&lt;/code&gt; object), calculate CPM values and extract metadata.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds&amp;quot;, destfile = &amp;quot;~/Downloads/pollen.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(&amp;quot;SingleCellExperiment&amp;quot;)
pollen &amp;lt;- readRDS(&amp;quot;~/Downloads/pollen.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollen_counts &amp;lt;- normcounts(pollen)
pollen_cpm  &amp;lt;- apply(pollen_counts, 2, function(x) (x/sum(x))*1000000)
pollen_metadata &amp;lt;- as.data.frame(colData(pollen))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s explore the cell type information&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(pollen_metadata$cell_type2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##       blood      dermal      neural pluripotent 
##         113          99          65          24&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A total of 301 cells are included in the dataset.&lt;/p&gt;
&lt;p&gt;For demostration purposes, we split a gene expression matrix into two groups (train and test datasets) based cell type information using the &lt;code&gt;createDataPartition()&lt;/code&gt; function from the &lt;code&gt;caret&lt;/code&gt; package (already loaded with &lt;code&gt;scPred&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;train&lt;/strong&gt; partition will be used to train a prediction models for each cell type and finally, the models will be tested using the &lt;strong&gt;test&lt;/strong&gt; partition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)
i &amp;lt;- createDataPartition(pollen_metadata$cell_type2, p = 0.70, list = FALSE)
train_data &amp;lt;- pollen_cpm[, i]
test_data &amp;lt;- pollen_cpm[, -i]

train_info &amp;lt;- pollen_metadata[i, , drop = FALSE]
test_info &amp;lt;- pollen_metadata[-i, , drop = FALSE]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;training-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Training step&lt;/h1&gt;
&lt;div id=&#34;eigendecomposition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eigendecomposition&lt;/h2&gt;
&lt;p&gt;The first part of the &lt;code&gt;scPred&lt;/code&gt; algorithm consists on decomposing the gene expresion matrix of the training dataset to obtained a low dimensional space that can describe most of the variance of the dataset. The &lt;code&gt;eigenDecompose&lt;/code&gt; function calculates the first &lt;code&gt;n&lt;/code&gt; principal components and log-transforms the input gene expression values to stabilize the variance. It returns an &lt;code&gt;scPred&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)
scp &amp;lt;- eigenDecompose(train_data, n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we assign the metadata containing the cell type information. Row names in the metadata dataframe must match the row names from the eigendecompsed gene expression matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scPred::metadata(scp) &amp;lt;- train_info&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;feature-selection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Feature selection&lt;/h2&gt;
&lt;p&gt;Next, we select the principal components that explain the class identity of each cell type using the &lt;code&gt;getFeatureSpace&lt;/code&gt; function. This function applies a Wilcoxcon rank sum test to determine the informative principal components according to a &lt;strong&gt;categorical variable&lt;/strong&gt; variable. In this case, we want to predict the cell types in the &lt;code&gt;cell_type2&lt;/code&gt; columns from the metadata. Run &lt;code&gt;?getFeatureSpace&lt;/code&gt; for more details.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- getFeatureSpace(scp, pVar = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## DONE!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;features&lt;/code&gt; slot contains the principal components that explain the class identity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pValue&lt;/strong&gt; contains the associated p-value for each principal component obtained using the Wilcoxon Rank sum test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pValueAdj&lt;/strong&gt; is the adjusted p-value depending omn the correction criterion applied. By defauls a false discovery rate corrections is performed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expVar&lt;/strong&gt; contrains the explained variance by each principal component&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cumExpVar&lt;/strong&gt; contains the cumulative variance explained&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All prrincipal components for each cell type are ranked by p-value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp@features&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $blood
##    PC       pValue    pValueAdj    expVar cumExpVar
## 1 PC2 6.186072e-26 6.186072e-25 20.291116  20.29112
## 2 PC5 3.594918e-10 1.797459e-09  8.573597  28.86471
## 3 PC3 2.822222e-08 9.407408e-08 11.433759  40.29847
## 4 PC4 2.866624e-07 7.166560e-07 10.080527  50.37900
## 
## $dermal
##    PC       pValue    pValueAdj   expVar cumExpVar
## 1 PC2 1.378227e-29 1.378227e-28 20.29112  20.29112
## 2 PC1 1.300270e-09 6.501350e-09 26.21813  46.50925
## 3 PC4 7.311207e-08 2.437069e-07 10.08053  56.58977
## 4 PC6 2.872213e-05 7.180532e-05  7.26231  63.85208
## 5 PC3 2.034155e-04 4.068310e-04 11.43376  75.28584
## 
## $neural
##    PC       pValue    pValueAdj   expVar cumExpVar
## 1 PC1 9.513036e-21 9.513036e-20 26.21813  26.21813
## 2 PC4 1.103454e-15 5.517270e-15 10.08053  36.29866
## 3 PC3 7.019078e-05 2.339693e-04 11.43376  47.73242
## 
## $pluripotent
##     PC       pValue    pValueAdj    expVar cumExpVar
## 1  PC6 8.590373e-12 8.590373e-11  7.262310   7.26231
## 2  PC4 2.420729e-10 1.210364e-09 10.080527  17.34284
## 3  PC5 1.797335e-08 5.991115e-08  8.573597  25.91643
## 4  PC9 1.169709e-07 2.924273e-07  3.512692  29.42913
## 5  PC8 9.169523e-05 1.833905e-04  4.313980  33.74311
## 6 PC10 4.675783e-03 7.792971e-03  3.418549  37.16165
## 7  PC3 1.065838e-02 1.522625e-02 11.433759  48.59541
## 8  PC2 1.376060e-02 1.720075e-02 20.291116  68.88653&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the principal components grouped by the prediction variable using the &lt;code&gt;plotEigen()&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotEigen(scp, group = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_pca-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-training&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model training&lt;/h2&gt;
&lt;p&gt;We can now train prediction models for blood, dermal, neural, and pluripotent cell types.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- trainModel(scp, seed = 66)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we print the &lt;code&gt;scPred&lt;/code&gt; object we can look at a summary of the slots contained in it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression data: shows the number of cells, genes, and principal components computed.&lt;/li&gt;
&lt;li&gt;Metadata information: Show the columns in the metadata slot. If columns are factor objects, they can be used as response veriables to train a prediction model&lt;/li&gt;
&lt;li&gt;Prediction variable: Shows the prediction variable as indicated using the &lt;code&gt;getFeatureSpace()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Informative PCs per class: shows the number of discriminant principal components for each class (e.g. cell type)&lt;/li&gt;
&lt;li&gt;Training: Shows the description of the classification model used for training. For each class, performance metrics such as AUROC,accuracy or kappa are shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The four models showed a specificity of &lt;code&gt;1&lt;/code&gt; and a sensitivity of &lt;code&gt;0.99&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;scPred&amp;#39; object
## 
## - Expression data
##       Cell embeddings =  213
##       Gene loadings =  21413
##       PCs =  10
## 
## - Metadata information
##       cell_type1, cell_type2
##       Prediction variable = cell_type2
##              n
## blood       80
## dermal      70
## neural      46
## pluripotent 17
## 
## - Informative PCs per class
##             Features
## blood              4
## dermal             5
## neural             3
## pluripotent        8
## 
## - Training information
##       Model: Support Vector Machines with Radial Basis Function Kernel
##             ROC Sens  Spec
## blood       1   0.988 1   
## dermal      1   1     1   
## neural      1   1     1   
## pluripotent 1   1     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the distribution of probabilities to see the performance of the predictions for each cell class using&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;getTrainResults()&lt;/code&gt; function extracts the predictions results obtained from the resampling step for training the prediction model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res &amp;lt;- getTrainResults(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the calculated probabilities for each cell type versus our cell labels:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotTrainProbs(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_train_probabilities-1.png&#34; width=&#34;1248&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the previous figure we can observe that a threshold of &lt;code&gt;0.9&lt;/code&gt; classifies all &lt;em&gt;dermal&lt;/em&gt;, &lt;em&gt;neural&lt;/em&gt; and &lt;em&gt;pluripotent&lt;/em&gt; cells correctly and almost all &lt;em&gt;blood&lt;/em&gt; cells too. Each panel represents a prediction model and the colors the known true classes. All &lt;em&gt;other&lt;/em&gt; cells are cells except the positive class (for example, for the blood prediction model all &lt;em&gt;other&lt;/em&gt; cells are either &lt;em&gt;dermal&lt;/em&gt;, &lt;em&gt;neural&lt;/em&gt;, or &lt;em&gt;pluripotent&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prediction-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prediction step&lt;/h1&gt;
&lt;p&gt;Once the models have been trained they can be applied to predict cell types in other dataset, for this demonstration we’ll use the &lt;strong&gt;test&lt;/strong&gt; partition/ &lt;code&gt;scPredict()&lt;/code&gt; projects the training principal axes onto the test dataset and predicts the cell identity using the trained models. By default, &lt;code&gt;scPredict()&lt;/code&gt; uses a threshold of &lt;code&gt;0.9&lt;/code&gt; to classify the cells into categories.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- scPredict(scp, newData = test_data, threshold = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Predicting cell types&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scPredict()&lt;/code&gt; adds a dataframe with the probabilities of each cell to belong to any of the cell classes. The &lt;code&gt;predClass&lt;/code&gt; columns is set using the provided threshold. Use &lt;code&gt;getPredictions&lt;/code&gt; to obtain the prediction results&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getPredictions(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    blood      dermal      neural pluripotent   predClass
## Hi_2338_1    0.006655574 0.998660453 0.007440833 0.005008749      dermal
## Hi_2338_2    0.005973183 0.997339365 0.007017599 0.004993949      dermal
## Hi_2338_4    0.011011438 0.993270822 0.009921552 0.004863217      dermal
## Hi_2338_5    0.017761575 0.995914310 0.006822524 0.003790517      dermal
## Hi_2338_17   0.024224216 0.902759744 0.014851823 0.005114912      dermal
## Hi_2339_7    0.993408005 0.012042407 0.008148723 0.005297627       blood
## Hi_2339_8    0.997380247 0.007232218 0.005281070 0.005404905       blood
## Hi_2339_9    0.964734320 0.006105625 0.013411268 0.005270132       blood
## Hi_2339_11   0.993005444 0.007104105 0.004966572 0.005266716       blood
## Hi_2339_14   0.965739837 0.038056046 0.006520396 0.005291290       blood
## Hi_K562_2    0.995894429 0.005652630 0.002859333 0.003933956       blood
## Hi_K562_4    0.989691640 0.007281384 0.009687081 0.004711426       blood
## Hi_K562_10   0.988013653 0.006033125 0.002608131 0.004933491       blood
## Hi_BJ_1      0.010147845 0.995365243 0.005814412 0.003934623      dermal
## Hi_BJ_2      0.007979329 0.990617637 0.009042959 0.005142634      dermal
## Hi_BJ_6      0.009356208 0.995618949 0.008309160 0.005081296      dermal
## Hi_BJ_8      0.010222853 0.993650077 0.006426775 0.005213273      dermal
## Hi_BJ_10     0.007288164 0.996559180 0.005883454 0.004426564      dermal
## Hi_BJ_11     0.007089321 0.992122295 0.007084840 0.005234733      dermal
## Hi_BJ_12     0.007945532 0.995737015 0.005083199 0.004575928      dermal
## Hi_BJ_17     0.008009722 0.994678439 0.007570398 0.005267640      dermal
## Hi_BJ_19     0.007158134 0.989414384 0.008616647 0.005318316      dermal
## Hi_BJ_30     0.008399897 0.996345448 0.006304303 0.004977630      dermal
## Hi_BJ_34     0.009390083 0.996917264 0.007515548 0.003791881      dermal
## Hi_K562_19   0.994617229 0.006784354 0.009251010 0.004032127       blood
## Hi_K562_20   0.953711538 0.008983164 0.004315662 0.004139086       blood
## Hi_K562_22   0.994391053 0.005913928 0.004323663 0.004350141       blood
## Hi_K562_23   0.996412632 0.005749871 0.005622456 0.004688460       blood
## Hi_K562_25   0.994925606 0.005923280 0.004797062 0.004736955       blood
## Hi_K562_31   0.996464299 0.005393526 0.003702113 0.004653050       blood
## Hi_K562_34   0.995227159 0.006150064 0.005739733 0.005181145       blood
## Hi_K562_36   0.996773580 0.005926799 0.006433327 0.004128915       blood
## Hi_K562_38   0.995700707 0.005717990 0.003582286 0.004625779       blood
## Hi_K562_40   0.995912496 0.005283276 0.002926409 0.004131597       blood
## Hi_K562_41   0.996614506 0.005355295 0.004310329 0.004487103       blood
## Hi_HL60_2    0.996008108 0.003203810 0.005795405 0.005781991       blood
## Hi_HL60_4    0.986202938 0.002948087 0.016482828 0.004618730       blood
## Hi_HL60_6    0.997596728 0.001202118 0.007585141 0.004881546       blood
## Hi_HL60_7    0.982888385 0.006903896 0.009560793 0.005386941       blood
## Hi_HL60_14   0.997717195 0.001131019 0.005303001 0.005319333       blood
## Hi_HL60_15   0.995420209 0.007555687 0.008033794 0.005274040       blood
## Hi_HL60_23   0.994897770 0.002550216 0.006079878 0.005537385       blood
## Hi_HL60_33   0.996792166 0.004219183 0.006055872 0.005153092       blood
## Hi_HL60_36   0.995829430 0.003149186 0.005590083 0.005020133       blood
## Hi_HL60_37   0.996538603 0.006027821 0.008660022 0.005188622       blood
## Hi_HL60_43   0.996048487 0.003662060 0.005691881 0.004947445       blood
## Hi_HL60_48   0.996612696 0.004402476 0.007093712 0.005819822       blood
## Hi_HL60_52   0.995951072 0.004375453 0.007077423 0.004929013       blood
## Hi_HL60_54   0.997391250 0.003718601 0.006168916 0.005145309       blood
## Hi_iPS_1     0.006773016 0.006315371 0.005107275 0.956066585 pluripotent
## Hi_iPS_4     0.005459630 0.005991352 0.006274916 0.938805907 pluripotent
## Hi_iPS_7     0.007263328 0.006166505 0.003852328 0.968535863 pluripotent
## Hi_iPS_8     0.006315538 0.004690963 0.087484043 0.919976331 pluripotent
## Hi_iPS_10    0.005696906 0.006815225 0.002949809 0.962067845 pluripotent
## Hi_iPS_16    0.005472227 0.006513774 0.004396123 0.957438517 pluripotent
## Hi_iPS_23    0.006540182 0.005926688 0.005573124 0.937271921 pluripotent
## Hi_Kera_2    0.005790139 0.990108122 0.007238154 0.004516796      dermal
## Hi_Kera_6    0.007670905 0.986628692 0.006459826 0.005081581      dermal
## Hi_Kera_7    0.003594498 0.996075392 0.006550450 0.003735429      dermal
## Hi_Kera_8    0.006915099 0.996701772 0.007179775 0.003988914      dermal
## Hi_Kera_9    0.010128375 0.979702056 0.005616018 0.004241848      dermal
## Hi_Kera_10   0.002340482 0.996582641 0.006275293 0.004080611      dermal
## Hi_Kera_11   0.004360678 0.992117012 0.006753084 0.003618161      dermal
## Hi_Kera_13   0.006507960 0.997093650 0.006786817 0.003808263      dermal
## Hi_Kera_14   0.013371787 0.984571905 0.006841817 0.004315511      dermal
## Hi_Kera_16   0.012030558 0.970493319 0.005210746 0.004419983      dermal
## Hi_Kera_25   0.004569195 0.994097757 0.006362785 0.003744171      dermal
## Hi_Kera_39   0.004015330 0.990008026 0.006202351 0.003942094      dermal
## Hi_Kera_40   0.077702287 0.758051254 0.006991119 0.004444502  unassigned
## Hi_GW21.2_2  0.005387813 0.005735801 0.997628545 0.004467574      neural
## Hi_GW21.2_7  0.006159599 0.005077643 0.999277999 0.005481054      neural
## Hi_GW21.2_8  0.007246919 0.005188322 0.999270411 0.006086767      neural
## Hi_GW21.2_10 0.006596429 0.004754111 0.999664466 0.006450892      neural
## Hi_GW21.2_13 0.007135911 0.005351180 0.998825375 0.006651554      neural
## Hi_GW21.2_14 0.036515341 0.009006564 0.985959169 0.006464392      neural
## Hi_GW21_3    0.006739270 0.003618348 0.999669848 0.004820192      neural
## Hi_GW21_5    0.010231166 0.013654829 0.998429909 0.003903365      neural
## Hi_NPC_3     0.004529544 0.005334441 0.998956256 0.004840688      neural
## Hi_NPC_10    0.004695227 0.004655696 0.998736001 0.004358542      neural
## Hi_NPC_13    0.005328657 0.004962464 0.993770313 0.006186660      neural
## Hi_GW16_1    0.009173163 0.005942934 0.998591466 0.004733403      neural
## Hi_GW16_2    0.012745847 0.006665138 0.996897389 0.004280930      neural
## Hi_GW16_8    0.007429963 0.004603408 0.994664971 0.005579575      neural
## Hi_GW16_9    0.009558793 0.007997607 0.997377036 0.003998157      neural
## Hi_GW16_20   0.005432284 0.004486833 0.999827641 0.003163558      neural
## Hi_GW16_23   0.024155920 0.004874453 0.999093780 0.004073243      neural
## Hi_GW16_24   0.008210821 0.003561112 0.999554156 0.004285415      neural
## Hi_GW16_26   0.008582737 0.007208059 0.998088158 0.003999236      neural&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can obtain a contingency table showing the prediction results versus the true cell type labels. First, we assign the metadata containing the true cell types to the &lt;code&gt;predMeta&lt;/code&gt; slot&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp@predMeta &amp;lt;- test_info&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can use the &lt;code&gt;crossTab()&lt;/code&gt; function to obtain the contingency table. The &lt;code&gt;true&lt;/code&gt; parameter indicates the column in &lt;code&gt;predMeta&lt;/code&gt; that contains the true labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scp, true = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             blood dermal neural pluripotent
## blood           1   0.00      0           0
## dermal          0   0.97      0           0
## neural          0   0.00      1           0
## pluripotent     0   0.00      0           1
## unassigned      0   0.03      0           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rows correspond to the prediction labels provided by &lt;code&gt;scPred&lt;/code&gt; and the columns to the &lt;code&gt;true&lt;/code&gt; column in &lt;code&gt;@predMeta&lt;/code&gt; By default &lt;code&gt;crossTab&lt;/code&gt; returns the proportion of cells classified for each possible group. Set &lt;code&gt;prop = FALSE&lt;/code&gt; to get the cell counts instead of proportions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scp, true = &amp;quot;cell_type2&amp;quot;, prop = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             blood dermal neural pluripotent
## blood          33      0      0           0
## dermal          0     28      0           0
## neural          0      0     19           0
## pluripotent     0      0      0           7
## unassigned      0      1      0           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the probabilities using the &lt;code&gt;plotPredProbs&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotPredProbs(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_prediction_porbs-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the previous plot, each panel represents the predictions each cell type across the different models. Each distribution and its colors represent the cell type evaluated by each prediction model in &lt;code&gt;@train&lt;/code&gt;. We can observe that all blood, neural and pluripotent cells were correctly classified using a threshold of &lt;code&gt;0.9&lt;/code&gt;. Only one dermal cell was labeled as &lt;strong&gt;unassigned&lt;/strong&gt; as it was below the threshold. This cell has a probability of &lt;code&gt;0.75&lt;/code&gt; of being dermal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reproducibility&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(width = 70)
devtools::session_info(include_base = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ─────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       macOS High Sierra 10.13.6   
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_AU.UTF-8                 
##  ctype    en_AU.UTF-8                 
##  tz       Australia/Sydney            
##  date     2018-12-06                  
## 
## ─ Packages ─────────────────────────────────────────────────────────
##  ! package              * version    date       lib source        
##    abind                  1.4-5      2016-07-21 [1] CRAN (R 3.5.0)
##    acepack                1.4.1      2016-10-29 [1] CRAN (R 3.5.0)
##    ape                    5.2        2018-09-24 [1] CRAN (R 3.5.0)
##    assertthat             0.2.0      2017-04-11 [1] CRAN (R 3.5.0)
##    backports              1.1.2      2017-12-13 [1] CRAN (R 3.5.0)
##    base                 * 3.5.1      2018-07-05 [?] local         
##    base64enc              0.1-3      2015-07-28 [1] CRAN (R 3.5.0)
##    bibtex                 0.4.2      2017-06-30 [1] CRAN (R 3.5.0)
##    bindr                  0.1.1      2018-03-13 [1] CRAN (R 3.5.0)
##    bindrcpp             * 0.2.2      2018-03-29 [1] CRAN (R 3.5.0)
##    Biobase              * 2.42.0     2018-10-30 [1] Bioconductor  
##    BiocGenerics         * 0.28.0     2018-10-30 [1] Bioconductor  
##    BiocParallel         * 1.16.0     2018-10-30 [1] Bioconductor  
##    bit                    1.1-14     2018-05-29 [1] CRAN (R 3.5.0)
##    bit64                  0.9-7      2017-05-08 [1] CRAN (R 3.5.0)
##    bitops                 1.0-6      2013-08-17 [1] CRAN (R 3.5.0)
##    blogdown               0.9        2018-10-23 [1] CRAN (R 3.5.0)
##    bookdown               0.8        2018-12-03 [1] CRAN (R 3.5.0)
##    broom                  0.5.0      2018-07-17 [1] CRAN (R 3.5.0)
##    callr                  3.0.0      2018-08-24 [1] CRAN (R 3.5.0)
##    caret                * 6.0-80     2018-05-26 [1] CRAN (R 3.5.0)
##    caTools                1.17.1.1   2018-07-20 [1] CRAN (R 3.5.0)
##    cellranger             1.1.0      2016-07-27 [1] CRAN (R 3.5.0)
##    checkmate              1.8.5      2017-10-24 [1] CRAN (R 3.5.0)
##    class                  7.3-14     2015-08-30 [1] CRAN (R 3.5.1)
##    cli                    1.0.1      2018-09-25 [1] CRAN (R 3.5.0)
##    cluster                2.0.7-1    2018-04-13 [1] CRAN (R 3.5.0)
##    codetools              0.2-15     2016-10-05 [1] CRAN (R 3.5.1)
##    colorspace             1.3-2      2016-12-14 [1] CRAN (R 3.5.0)
##  P compiler               3.5.1      2018-07-05 [1] local         
##    cowplot                0.9.3      2018-07-15 [1] CRAN (R 3.5.0)
##    crayon                 1.3.4      2017-09-16 [1] CRAN (R 3.5.0)
##    CVST                   0.2-2      2018-05-26 [1] CRAN (R 3.5.0)
##    data.table             1.11.8     2018-09-30 [1] CRAN (R 3.5.0)
##  P datasets             * 3.5.1      2018-07-05 [1] local         
##    ddalpha                1.3.4      2018-06-23 [1] CRAN (R 3.5.0)
##    DelayedArray         * 0.8.0      2018-10-30 [1] Bioconductor  
##    DEoptimR               1.0-8      2016-11-19 [1] CRAN (R 3.5.0)
##    desc                   1.2.0      2018-05-01 [1] CRAN (R 3.5.0)
##    devtools               2.0.1      2018-10-26 [1] CRAN (R 3.5.1)
##    digest                 0.6.18     2018-10-10 [1] CRAN (R 3.5.0)
##    dimRed                 0.1.0      2017-05-04 [1] CRAN (R 3.5.0)
##    diptest                0.75-7     2016-12-05 [1] CRAN (R 3.5.0)
##    doSNOW                 1.0.16     2017-12-13 [1] CRAN (R 3.5.0)
##    dplyr                * 0.7.8      2018-11-10 [1] CRAN (R 3.5.0)
##    DRR                    0.0.3      2018-01-06 [1] CRAN (R 3.5.0)
##    dtw                    1.20-1     2018-05-18 [1] CRAN (R 3.5.0)
##    evaluate               0.12       2018-10-09 [1] CRAN (R 3.5.0)
##    fitdistrplus           1.0-11     2018-09-10 [1] CRAN (R 3.5.0)
##    flexmix                2.3-14     2017-04-28 [1] CRAN (R 3.5.0)
##    forcats              * 0.3.0      2018-02-19 [1] CRAN (R 3.5.0)
##    foreach                1.4.4      2017-12-12 [1] CRAN (R 3.5.0)
##    foreign                0.8-71     2018-07-20 [1] CRAN (R 3.5.0)
##    Formula                1.2-3      2018-05-03 [1] CRAN (R 3.5.0)
##    fpc                    2.1-11.1   2018-07-20 [1] CRAN (R 3.5.0)
##    fs                     1.2.6      2018-08-23 [1] CRAN (R 3.5.0)
##    gbRd                   0.4-11     2012-10-01 [1] CRAN (R 3.5.0)
##    gdata                  2.18.0     2017-06-06 [1] CRAN (R 3.5.0)
##    GenomeInfoDb         * 1.18.1     2018-11-12 [1] Bioconductor  
##    GenomeInfoDbData       1.2.0      2018-11-07 [1] Bioconductor  
##    GenomicRanges        * 1.34.0     2018-10-30 [1] Bioconductor  
##    geometry               0.3-6      2015-09-09 [1] CRAN (R 3.5.0)
##    ggplot2              * 3.1.0      2018-10-25 [1] CRAN (R 3.5.0)
##    ggridges               0.5.1      2018-09-27 [1] CRAN (R 3.5.0)
##    glue                   1.3.0      2018-07-17 [1] CRAN (R 3.5.0)
##    gower                  0.1.2      2017-02-23 [1] CRAN (R 3.5.0)
##    gplots                 3.0.1      2016-03-30 [1] CRAN (R 3.5.0)
##  P graphics             * 3.5.1      2018-07-05 [1] local         
##  P grDevices            * 3.5.1      2018-07-05 [1] local         
##  P grid                   3.5.1      2018-07-05 [1] local         
##    gridExtra              2.3        2017-09-09 [1] CRAN (R 3.5.0)
##    gtable                 0.2.0      2016-02-26 [1] CRAN (R 3.5.0)
##    gtools                 3.8.1      2018-06-26 [1] CRAN (R 3.5.0)
##    haven                  1.1.2      2018-06-27 [1] CRAN (R 3.5.0)
##    hdf5r                  1.0.1      2018-10-07 [1] CRAN (R 3.5.0)
##    Hmisc                  4.1-1      2018-01-03 [1] CRAN (R 3.5.0)
##    hms                    0.4.2      2018-03-10 [1] CRAN (R 3.5.0)
##    htmlTable              1.12       2018-05-26 [1] CRAN (R 3.5.0)
##    htmltools              0.3.6      2017-04-28 [1] CRAN (R 3.5.0)
##    htmlwidgets            1.3        2018-09-30 [1] CRAN (R 3.5.0)
##    httr                   1.3.1      2017-08-20 [1] CRAN (R 3.5.0)
##    ica                    1.0-2      2018-05-24 [1] CRAN (R 3.5.0)
##    igraph                 1.2.2      2018-07-27 [1] CRAN (R 3.5.0)
##    ipred                  0.9-8      2018-11-05 [1] CRAN (R 3.5.0)
##    IRanges              * 2.16.0     2018-10-30 [1] Bioconductor  
##    irlba                * 2.3.2      2018-01-11 [1] CRAN (R 3.5.0)
##    iterators              1.0.10     2018-07-13 [1] CRAN (R 3.5.0)
##    jsonlite               1.5        2017-06-01 [1] CRAN (R 3.5.0)
##    kernlab              * 0.9-27     2018-08-10 [1] CRAN (R 3.5.0)
##    KernSmooth             2.23-15    2015-06-29 [1] CRAN (R 3.5.1)
##    knitr                  1.20       2018-02-20 [1] CRAN (R 3.5.0)
##    labeling               0.3        2014-08-23 [1] CRAN (R 3.5.0)
##    lars                   1.2        2013-04-24 [1] CRAN (R 3.5.0)
##    lattice              * 0.20-38    2018-11-04 [1] CRAN (R 3.5.0)
##    latticeExtra           0.6-28     2016-02-09 [1] CRAN (R 3.5.0)
##    lava                   1.6.3      2018-08-10 [1] CRAN (R 3.5.0)
##    lazyeval               0.2.1      2017-10-29 [1] CRAN (R 3.5.0)
##    lmtest                 0.9-36     2018-04-04 [1] CRAN (R 3.5.0)
##    lsei                   1.2-0      2017-10-23 [1] CRAN (R 3.5.0)
##    lubridate              1.7.4      2018-04-11 [1] CRAN (R 3.5.0)
##    magic                  1.5-9      2018-09-17 [1] CRAN (R 3.5.0)
##    magrittr               1.5        2014-11-22 [1] CRAN (R 3.5.0)
##    MASS                   7.3-51.1   2018-11-01 [1] CRAN (R 3.5.0)
##    Matrix               * 1.2-15     2018-11-01 [1] CRAN (R 3.5.0)
##    matrixStats          * 0.54.0     2018-07-23 [1] CRAN (R 3.5.0)
##    mclust                 5.4.2      2018-11-17 [1] CRAN (R 3.5.0)
##    memoise                1.1.0      2017-04-21 [1] CRAN (R 3.5.0)
##    metap                  1.0        2018-07-25 [1] CRAN (R 3.5.0)
##  P methods              * 3.5.1      2018-07-05 [1] local         
##    mixtools               1.1.0      2017-03-10 [1] CRAN (R 3.5.0)
##    ModelMetrics           1.2.2      2018-11-03 [1] CRAN (R 3.5.0)
##    modelr                 0.1.2      2018-05-11 [1] CRAN (R 3.5.0)
##    modeltools             0.2-22     2018-07-16 [1] CRAN (R 3.5.0)
##    munsell                0.5.0      2018-06-12 [1] CRAN (R 3.5.0)
##    mvtnorm                1.0-8      2018-05-31 [1] CRAN (R 3.5.0)
##    nlme                   3.1-137    2018-04-07 [1] CRAN (R 3.5.1)
##    nnet                   7.3-12     2016-02-02 [1] CRAN (R 3.5.1)
##    npsurv                 0.4-0      2017-10-14 [1] CRAN (R 3.5.0)
##  P parallel             * 3.5.1      2018-07-05 [1] local         
##    pbapply                1.3-4      2018-01-10 [1] CRAN (R 3.5.0)
##    pillar                 1.3.0      2018-07-14 [1] CRAN (R 3.5.0)
##    pkgbuild               1.0.2      2018-10-16 [1] CRAN (R 3.5.1)
##    pkgconfig              2.0.2      2018-08-16 [1] CRAN (R 3.5.0)
##    pkgload                1.0.2      2018-10-29 [1] CRAN (R 3.5.0)
##    pls                    2.7-0      2018-08-21 [1] CRAN (R 3.5.0)
##    plyr                   1.8.4      2016-06-08 [1] CRAN (R 3.5.0)
##    png                    0.1-7      2013-12-03 [1] CRAN (R 3.5.0)
##    prabclus               2.2-6      2015-01-14 [1] CRAN (R 3.5.0)
##    prettyunits            1.0.2      2015-07-13 [1] CRAN (R 3.5.0)
##    processx               3.2.0      2018-08-16 [1] CRAN (R 3.5.0)
##    prodlim                2018.04.18 2018-04-18 [1] CRAN (R 3.5.0)
##    proxy                  0.4-22     2018-04-08 [1] CRAN (R 3.5.0)
##    ps                     1.2.1      2018-11-06 [1] CRAN (R 3.5.0)
##    purrr                * 0.2.5      2018-05-29 [1] CRAN (R 3.5.0)
##    R.methodsS3            1.7.1      2016-02-16 [1] CRAN (R 3.5.0)
##    R.oo                   1.22.0     2018-04-22 [1] CRAN (R 3.5.0)
##    R.utils                2.7.0      2018-08-27 [1] CRAN (R 3.5.0)
##    R6                     2.3.0      2018-10-04 [1] CRAN (R 3.5.0)
##    RANN                   2.6        2018-07-16 [1] CRAN (R 3.5.0)
##    RColorBrewer           1.1-2      2014-12-07 [1] CRAN (R 3.5.0)
##    Rcpp                   1.0.0      2018-11-07 [1] CRAN (R 3.5.0)
##    RcppRoll               0.3.0      2018-06-05 [1] CRAN (R 3.5.0)
##    RCurl                  1.95-4.11  2018-07-15 [1] CRAN (R 3.5.0)
##    Rdpack                 0.10-1     2018-10-04 [1] CRAN (R 3.5.0)
##    readr                * 1.1.1      2017-05-16 [1] CRAN (R 3.5.0)
##    readxl                 1.1.0      2018-04-20 [1] CRAN (R 3.5.0)
##    recipes                0.1.3      2018-06-16 [1] CRAN (R 3.5.0)
##    remotes                2.0.2      2018-10-30 [1] CRAN (R 3.5.1)
##    reshape2               1.4.3      2017-12-11 [1] CRAN (R 3.5.0)
##    reticulate             1.10       2018-08-05 [1] CRAN (R 3.5.0)
##    rlang                  0.3.0.1    2018-10-25 [1] CRAN (R 3.5.0)
##    rmarkdown              1.10       2018-06-11 [1] CRAN (R 3.5.0)
##    robustbase             0.93-3     2018-09-21 [1] CRAN (R 3.5.0)
##    ROCR                   1.0-7      2015-03-26 [1] CRAN (R 3.5.0)
##    rpart                  4.1-13     2018-02-23 [1] CRAN (R 3.5.1)
##    rprojroot              1.3-2      2018-01-03 [1] CRAN (R 3.5.0)
##    rstudioapi             0.8        2018-10-02 [1] CRAN (R 3.5.0)
##    Rtsne                  0.15       2018-11-10 [1] CRAN (R 3.5.0)
##    rvest                  0.3.2      2016-06-17 [1] CRAN (R 3.5.0)
##    S4Vectors            * 0.20.1     2018-11-09 [1] Bioconductor  
##    scales                 1.0.0      2018-08-09 [1] CRAN (R 3.5.0)
##    scPred               * 0.0.0.9000 2018-12-06 [1] local         
##    SDMTools               1.1-221    2014-08-05 [1] CRAN (R 3.5.0)
##    segmented              0.5-3.0    2017-11-30 [1] CRAN (R 3.5.0)
##    sessioninfo            1.1.1      2018-11-05 [1] CRAN (R 3.5.0)
##    Seurat                 2.3.4      2018-07-17 [1] CRAN (R 3.5.0)
##    sfsmisc                1.1-2      2018-03-05 [1] CRAN (R 3.5.0)
##    SingleCellExperiment * 1.4.0      2018-10-30 [1] Bioconductor  
##    snow                   0.4-3      2018-09-14 [1] CRAN (R 3.5.0)
##  P splines                3.5.1      2018-07-05 [1] local         
##  P stats                * 3.5.1      2018-07-05 [1] local         
##  P stats4               * 3.5.1      2018-07-05 [1] local         
##    stringi                1.2.4      2018-07-20 [1] CRAN (R 3.5.0)
##    stringr              * 1.3.1      2018-05-10 [1] CRAN (R 3.5.0)
##    SummarizedExperiment * 1.12.0     2018-10-30 [1] Bioconductor  
##    survival               2.43-1     2018-10-29 [1] CRAN (R 3.5.0)
##    tibble               * 1.4.2      2018-01-22 [1] CRAN (R 3.5.0)
##    tidyr                * 0.8.2      2018-10-28 [1] CRAN (R 3.5.0)
##    tidyselect             0.2.5      2018-10-11 [1] CRAN (R 3.5.0)
##    tidyverse            * 1.2.1      2017-11-14 [1] CRAN (R 3.5.0)
##    timeDate               3043.102   2018-02-21 [1] CRAN (R 3.5.0)
##  P tools                  3.5.1      2018-07-05 [1] local         
##    trimcluster            0.1-2.1    2018-07-20 [1] CRAN (R 3.5.0)
##    tsne                   0.1-3      2016-07-15 [1] CRAN (R 3.5.0)
##    usethis                1.4.0      2018-08-14 [1] CRAN (R 3.5.0)
##  P utils                * 3.5.1      2018-07-05 [1] local         
##    withr                  2.1.2      2018-03-15 [1] CRAN (R 3.5.0)
##    xfun                   0.4        2018-10-23 [1] CRAN (R 3.5.0)
##    xml2                   1.2.0      2018-01-24 [1] CRAN (R 3.5.0)
##    XVector                0.22.0     2018-10-30 [1] Bioconductor  
##    yaml                   2.2.0      2018-07-25 [1] CRAN (R 3.5.0)
##    zlibbioc               1.28.0     2018-10-30 [1] Bioconductor  
##    zoo                    1.8-4      2018-09-19 [1] CRAN (R 3.5.0)
## 
## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library
## 
##  P ── Loaded and on-disk path mismatch.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>/post/getting-started/</link>
      <pubDate>Thu, 27 Sep 2018 20:00:00 +1000</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>&lt;p&gt;I will periodically post articles related to genomics, computational biology, statistics and R.&lt;/p&gt;

&lt;p&gt;I hope you have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +1000</pubDate>
      
      <guid>/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ascend: R package for analysis of single cell RNA-seq data</title>
      <link>/publication/ascend/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +1000</pubDate>
      
      <guid>/publication/ascend/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>scPred: Cell type prediction at single cell resolution</title>
      <link>/publication/scpred/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +1000</pubDate>
      
      <guid>/publication/scpred/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +1000</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>scPred: cell type prediction at single cell resolution</title>
      <link>/talk/single_cell_oz_2018/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +1000</pubDate>
      
      <guid>/talk/single_cell_oz_2018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;em&gt;Slides&lt;/em&gt; feature and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Human splicing diversity and the extent of unannotated splice junctions across human RNA-seq samples on the Sequence Read Archive</title>
      <link>/publication/human_splicing_diversity/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +1100</pubDate>
      
      <guid>/publication/human_splicing_diversity/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rail-RNA: scalable analysis of RNA-seq splicing and coverage</title>
      <link>/publication/rail/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +1000</pubDate>
      
      <guid>/publication/rail/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
