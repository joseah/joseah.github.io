<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Alquicira Hernandez on Jose Alquicira Hernandez</title>
    <link>/</link>
    <description>Recent content in Jose Alquicira Hernandez on Jose Alquicira Hernandez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 10 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to scPred</title>
      <link>/post/introduction-to-scpred/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-scpred/</guid>
      <description>


&lt;div id=&#34;summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;scPred&lt;/code&gt; is a general method to predict cell types based on variance structure decomposition.
It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.&lt;/p&gt;
&lt;p&gt;For more details see our paper in &lt;strong&gt;Genome Biology&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1862-5&#34;&gt;scPred: accurate supervised method for cell-type classification from single-cell RNA-seq data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;application-of-scpred&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Application of &lt;code&gt;scPred&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;First, we load the &lt;code&gt;scPred&lt;/code&gt; package, and &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;scPred&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will work with single cell data from pluripotent, blood, skin and neural cells sequenced at low coverage. For more details about the study, see &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/25086649&#34;&gt;Low-coverage single-cell mRNA sequencing reveals cellular heterogeneity and activated signaling pathways in developing cerebral cortex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The count matrix and metadata may be obtained &lt;a href=&#34;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds&#34;&gt;here&lt;/a&gt; from Hemberg’s &lt;a href=&#34;https://hemberg-lab.github.io/scRNA.seq.datasets&#34;&gt;lab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read the gene expression data (&lt;code&gt;SingleCellExperiment&lt;/code&gt; object), calculate CPM values and extract metadata.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds&amp;quot;, destfile = &amp;quot;~/Downloads/pollen.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(&amp;quot;SingleCellExperiment&amp;quot;)
pollen &amp;lt;- readRDS(&amp;quot;~/Downloads/pollen.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For demonstration purposes, we apply a standard CPM normalization, however any other normalization approach may be used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollen_counts &amp;lt;- normcounts(pollen)
pollen_cpm  &amp;lt;- apply(pollen_counts, 2, function(x) (x/sum(x))*1000000)
pollen_metadata &amp;lt;- as.data.frame(colData(pollen))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s explore the cell type information&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(pollen_metadata$cell_type2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##       blood      dermal      neural pluripotent 
##         113          99          65          24&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A total of 301 cells are included in the dataset.&lt;/p&gt;
&lt;p&gt;For demostration purposes, we split a gene expression matrix into two groups (train and test datasets) based cell type information using the &lt;code&gt;createDataPartition()&lt;/code&gt; function from the &lt;code&gt;caret&lt;/code&gt; package (already loaded with &lt;code&gt;scPred&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;train&lt;/strong&gt; partition will be used to train a prediction models for each cell type and finally, the models will be tested using the &lt;strong&gt;test&lt;/strong&gt; partition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)
i &amp;lt;- createDataPartition(pollen_metadata$cell_type2, p = 0.70, list = FALSE)
train_data &amp;lt;- pollen_cpm[, i]
test_data &amp;lt;- pollen_cpm[, -i]

train_info &amp;lt;- pollen_metadata[i, , drop = FALSE]
test_info &amp;lt;- pollen_metadata[-i, , drop = FALSE]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;training-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Training step&lt;/h1&gt;
&lt;div id=&#34;eigendecomposition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eigendecomposition&lt;/h2&gt;
&lt;p&gt;The first part of the &lt;code&gt;scPred&lt;/code&gt; algorithm consists on decomposing the gene expresion matrix of the training dataset to obtained a low dimensional space that can describe most of the variance of the dataset. The &lt;code&gt;eigenDecompose&lt;/code&gt; function calculates the first &lt;code&gt;n&lt;/code&gt; principal components and log-transforms the input gene expression values to stabilize the variance. It returns an &lt;code&gt;scPred&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)
scp &amp;lt;- eigenDecompose(train_data, n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we assign the metadata containing the cell type information. Row names in the metadata dataframe must match the row names from the eigendecompsed gene expression matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scPred::metadata(scp) &amp;lt;- train_info&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;feature-selection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Feature selection&lt;/h2&gt;
&lt;p&gt;Next, we select the principal components that explain the class identity of each cell type using the &lt;code&gt;getFeatureSpace&lt;/code&gt; function. This function applies a Wilcoxcon rank sum test to determine the informative principal components according to a &lt;strong&gt;categorical variable&lt;/strong&gt; variable. In this case, we want to predict the cell types in the &lt;code&gt;cell_type2&lt;/code&gt; columns from the metadata. Run &lt;code&gt;?getFeatureSpace&lt;/code&gt; for more details.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- getFeatureSpace(scp, pVar = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## DONE!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;features&lt;/code&gt; slot contains the principal components that explain the class identity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pValue&lt;/strong&gt; contains the associated p-value for each principal component obtained using the Wilcoxon Rank sum test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pValueAdj&lt;/strong&gt; is the adjusted p-value depending omn the correction criterion applied. By defauls a false discovery rate corrections is performed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expVar&lt;/strong&gt; contrains the explained variance by each principal component&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cumExpVar&lt;/strong&gt; contains the cumulative variance explained&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All prrincipal components for each cell type are ranked by p-value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp@features&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $blood
##    PC       pValue    pValueAdj    expVar cumExpVar
## 1 PC2 6.186072e-26 6.186072e-25 20.291116  20.29112
## 2 PC5 3.594918e-10 1.797459e-09  8.573597  28.86471
## 3 PC3 2.822222e-08 9.407408e-08 11.433759  40.29847
## 4 PC4 2.866624e-07 7.166560e-07 10.080527  50.37900
## 
## $dermal
##    PC       pValue    pValueAdj   expVar cumExpVar
## 1 PC2 1.378227e-29 1.378227e-28 20.29112  20.29112
## 2 PC1 1.300270e-09 6.501350e-09 26.21813  46.50925
## 3 PC4 7.311207e-08 2.437069e-07 10.08053  56.58977
## 4 PC6 2.872213e-05 7.180532e-05  7.26231  63.85208
## 5 PC3 2.034155e-04 4.068310e-04 11.43376  75.28584
## 
## $neural
##    PC       pValue    pValueAdj   expVar cumExpVar
## 1 PC1 9.513036e-21 9.513036e-20 26.21813  26.21813
## 2 PC4 1.103454e-15 5.517270e-15 10.08053  36.29866
## 3 PC3 7.019078e-05 2.339693e-04 11.43376  47.73242
## 
## $pluripotent
##     PC       pValue    pValueAdj    expVar cumExpVar
## 1  PC6 8.590373e-12 8.590373e-11  7.262310   7.26231
## 2  PC4 2.420729e-10 1.210364e-09 10.080527  17.34284
## 3  PC5 1.797335e-08 5.991115e-08  8.573597  25.91643
## 4  PC9 1.169709e-07 2.924273e-07  3.512692  29.42913
## 5  PC8 9.169523e-05 1.833905e-04  4.313980  33.74311
## 6 PC10 4.675783e-03 7.792971e-03  3.418549  37.16165
## 7  PC3 1.065838e-02 1.522625e-02 11.433759  48.59541
## 8  PC2 1.376060e-02 1.720075e-02 20.291116  68.88653&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the principal components grouped by the prediction variable using the &lt;code&gt;plotEigen()&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotEigen(scp, group = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_pca-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-training&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model training&lt;/h2&gt;
&lt;p&gt;We can now train prediction models for blood, dermal, neural, and pluripotent cell types.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- trainModel(scp, seed = 66)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we print the &lt;code&gt;scPred&lt;/code&gt; object we can look at a summary of the slots contained in it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression data: shows the number of cells, genes, and principal components computed.&lt;/li&gt;
&lt;li&gt;Metadata information: Show the columns in the metadata slot. If columns are factor objects, they can be used as response veriables to train a prediction model&lt;/li&gt;
&lt;li&gt;Prediction variable: Shows the prediction variable as indicated using the &lt;code&gt;getFeatureSpace()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Informative PCs per class: shows the number of discriminant principal components for each class (e.g. cell type)&lt;/li&gt;
&lt;li&gt;Training: Shows the description of the classification model used for training. For each class, performance metrics such as AUROC,accuracy or kappa are shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The four models showed a specificity of &lt;code&gt;1&lt;/code&gt; and a sensitivity of &lt;code&gt;0.99&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;scPred&amp;#39; object
## 
## - Expression data
##       Cell embeddings =  213
##       Gene loadings =  21413
##       PCs =  10
## 
## - Metadata information
##       cell_type1, cell_type2
##       Prediction variable = cell_type2
##              n
## blood       80
## dermal      70
## neural      46
## pluripotent 17
## 
## - Informative PCs per class
##             Features
## blood              4
## dermal             5
## neural             3
## pluripotent        8
## 
## - Training information
##       Model: Support Vector Machines with Radial Basis Function Kernel
##             ROC Sens  Spec
## blood       1   0.988 1   
## dermal      1   1     1   
## neural      1   1     1   
## pluripotent 1   1     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the distribution of probabilities to see the performance of the predictions for each cell class using&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;getTrainPred()&lt;/code&gt; function extracts the predictions results obtained from the resampling step for training the prediction model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;res &amp;lt;- getTrainPred(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the calculated probabilities for each cell type versus our cell labels:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotTrainProbs(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_train_probabilities-1.png&#34; width=&#34;1248&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the previous figure we can observe that a threshold of &lt;code&gt;0.9&lt;/code&gt; classifies all &lt;em&gt;dermal&lt;/em&gt;, &lt;em&gt;neural&lt;/em&gt; and &lt;em&gt;pluripotent&lt;/em&gt; cells correctly and almost all &lt;em&gt;blood&lt;/em&gt; cells too. Each panel represents a prediction model and the colors the known true classes. All &lt;em&gt;other&lt;/em&gt; cells are cells except the positive class (for example, for the blood prediction model all &lt;em&gt;other&lt;/em&gt; cells are either &lt;em&gt;dermal&lt;/em&gt;, &lt;em&gt;neural&lt;/em&gt;, or &lt;em&gt;pluripotent&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prediction-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prediction step&lt;/h1&gt;
&lt;p&gt;Once the models have been trained they can be applied to predict cell types in other dataset, for this demonstration we’ll use the &lt;strong&gt;test&lt;/strong&gt; partition/ &lt;code&gt;scPredict()&lt;/code&gt; projects the training principal axes onto the test dataset and predicts the cell identity using the trained models. By default, &lt;code&gt;scPredict()&lt;/code&gt; uses a threshold of &lt;code&gt;0.9&lt;/code&gt; to classify the cells into categories.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp &amp;lt;- scPredict(scp, newData = test_data, threshold = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Predicting cell types&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scPredict()&lt;/code&gt; adds a dataframe with the probabilities of each cell to belong to any of the cell classes. The &lt;code&gt;predClass&lt;/code&gt; columns is set using the provided threshold. Use &lt;code&gt;getPredictions&lt;/code&gt; to obtain the prediction results&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getPredictions(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    blood      dermal      neural pluripotent   predClass
## Hi_2338_1    0.006123324 0.998636645 0.005233951 0.005019364      dermal
## Hi_2338_2    0.005489041 0.997300365 0.004951670 0.005004615      dermal
## Hi_2338_4    0.010187334 0.993200562 0.006873631 0.004874321      dermal
## Hi_2338_5    0.016522142 0.995862379 0.004821274 0.003804431      dermal
## Hi_2338_17   0.022616641 0.902918575 0.010077217 0.005125155      dermal
## Hi_2339_7    0.993537414 0.012419789 0.005704294 0.005307202       blood
## Hi_2339_8    0.997456360 0.007476920 0.003783615 0.005414072       blood
## Hi_2339_9    0.964811628 0.006317195 0.009147236 0.005279810       blood
## Hi_2339_11   0.993138488 0.007345087 0.003570097 0.005276406       blood
## Hi_2339_14   0.965825270 0.039020020 0.004618939 0.005300889       blood
## Hi_K562_2    0.995994948 0.005850596 0.002117951 0.003947583       blood
## Hi_K562_4    0.989846416 0.007527510 0.006719613 0.004723014       blood
## Hi_K562_10   0.988174869 0.006242529 0.001941614 0.004944362       blood
## Hi_BJ_1      0.009379808 0.995308990 0.004144217 0.003948248      dermal
## Hi_BJ_2      0.007355815 0.990533882 0.006295545 0.005152778      dermal
## Hi_BJ_6      0.008640279 0.995564654 0.005810601 0.005091658      dermal
## Hi_BJ_8      0.009449915 0.993582100 0.004556145 0.005223161      dermal
## Hi_BJ_10     0.006711982 0.996512760 0.004190768 0.004438988      dermal
## Hi_BJ_11     0.006526882 0.992045697 0.004996574 0.005244542      dermal
## Hi_BJ_12     0.007324316 0.995683654 0.003649357 0.004587927      dermal
## Hi_BJ_17     0.007384141 0.994617193 0.005320201 0.005277327      dermal
## Hi_BJ_19     0.006590933 0.989325713 0.006014059 0.005327813      dermal
## Hi_BJ_30     0.007747900 0.996297145 0.004473928 0.004988351      dermal
## Hi_BJ_34     0.008671909 0.996874137 0.005283697 0.003805793      dermal
## Hi_K562_19   0.994734103 0.007015999 0.006432677 0.004045540       blood
## Hi_K562_20   0.953682269 0.009277640 0.003125867 0.004152251       blood
## Hi_K562_22   0.994510470 0.006119763 0.003131349 0.004362772       blood
## Hi_K562_23   0.996505400 0.005950772 0.004014639 0.004700119       blood
## Hi_K562_25   0.995038852 0.006129395 0.003454723 0.004748464       blood
## Hi_K562_31   0.996556253 0.005583629 0.002703881 0.004664817       blood
## Hi_K562_34   0.995336669 0.006362959 0.004093832 0.005191150       blood
## Hi_K562_36   0.996860496 0.006133019 0.004560540 0.004142104       blood
## Hi_K562_38   0.995803946 0.005917929 0.002621050 0.004637629       blood
## Hi_K562_40   0.996012758 0.005470017 0.002164893 0.004144780       blood
## Hi_K562_41   0.996704050 0.005544233 0.003122214 0.004499358       blood
## Hi_HL60_2    0.996106988 0.003324669 0.004131396 0.005789631       blood
## Hi_HL60_4    0.986368329 0.003060458 0.011125239 0.004630602       blood
## Hi_HL60_6    0.997668652 0.001253000 0.005330010 0.004892589       blood
## Hi_HL60_7    0.983055124 0.007139040 0.006636582 0.005396178       blood
## Hi_HL60_14   0.997786701 0.001179214 0.003798479 0.005328826       blood
## Hi_HL60_15   0.995527224 0.007809733 0.005628077 0.005283703       blood
## Hi_HL60_23   0.995011352 0.002649165 0.004323054 0.005546032       blood
## Hi_HL60_33   0.996878770 0.004372839 0.004306898 0.005163198       blood
## Hi_HL60_36   0.995930872 0.003268241 0.003992763 0.005030708       blood
## Hi_HL60_37   0.996629373 0.006237066 0.006042730 0.005198600       blood
## Hi_HL60_43   0.996146777 0.003797888 0.004061530 0.004958268       blood
## Hi_HL60_48   0.996702270 0.004561916 0.005002497 0.005827301       blood
## Hi_HL60_52   0.996050779 0.004534042 0.004991622 0.004939899       blood
## Hi_HL60_54   0.997467155 0.003856256 0.004382945 0.005155444       blood
## Hi_iPS_1     0.006232564 0.006533183 0.003665708 0.954170285 pluripotent
## Hi_iPS_4     0.005012228 0.006199506 0.004454188 0.936329827 pluripotent
## Hi_iPS_7     0.006688859 0.006379890 0.002807518 0.967098223 pluripotent
## Hi_iPS_8     0.005807163 0.004859432 0.055213434 0.916927688 pluripotent
## Hi_iPS_10    0.005232470 0.007047774 0.002181255 0.960387598 pluripotent
## Hi_iPS_16    0.005023918 0.006737458 0.003180962 0.955590890 pluripotent
## Hi_iPS_23    0.006016013 0.006132905 0.003981301 0.934747004 pluripotent
## Hi_Kera_2    0.005319037 0.990022204 0.005098877 0.004528966      dermal
## Hi_Kera_6    0.007068429 0.986530945 0.004578318 0.005091943      dermal
## Hi_Kera_7    0.003285155 0.996024791 0.004639087 0.003749446      dermal
## Hi_Kera_8    0.006364752 0.996656643 0.005059935 0.004002423      dermal
## Hi_Kera_9    0.009361611 0.979592390 0.004010289 0.004254760      dermal
## Hi_Kera_10   0.002129332 0.996536432 0.004454441 0.004093914      dermal
## Hi_Kera_11   0.003993649 0.992040386 0.004774811 0.003632381      dermal
## Hi_Kera_13   0.005986052 0.997052214 0.004797385 0.003822144      dermal
## Hi_Kera_14   0.012398163 0.984469207 0.004834179 0.004328234      dermal
## Hi_Kera_16   0.011141259 0.970384330 0.003735930 0.004432425      dermal
## Hi_Kera_25   0.004186716 0.994032609 0.004513197 0.003758172      dermal
## Hi_Kera_39   0.003674117 0.989921698 0.004405423 0.003955703      dermal
## Hi_Kera_40   0.073670033 0.759264834 0.004933981 0.004456876  unassigned
## Hi_GW21.2_2  0.004945588 0.005936278 0.993836885 0.004479884      neural
## Hi_GW21.2_7  0.005662238 0.005258079 0.997990793 0.005489924      neural
## Hi_GW21.2_8  0.006673583 0.005372156 0.997970878 0.006093073      neural
## Hi_GW21.2_10 0.006068319 0.004924545 0.999025184 0.006455496      neural
## Hi_GW21.2_13 0.006570247 0.005539993 0.996820409 0.006655171      neural
## Hi_GW21.2_14 0.034265395 0.009301694 0.967446664 0.006468931      neural
## Hi_GW21_3    0.006201172 0.003752761 0.999039952 0.004831436      neural
## Hi_GW21_5    0.009457685 0.014074185 0.995820229 0.003917056      neural
## Hi_NPC_3     0.004149996 0.005522743 0.997155566 0.004851865      neural
## Hi_NPC_10    0.004303458 0.004823066 0.996592823 0.004371151      neural
## Hi_NPC_13    0.004890704 0.005139352 0.984736796 0.006192511      neural
## Hi_GW16_1    0.008469385 0.006149638 0.996226761 0.004744923      neural
## Hi_GW16_2    0.011811376 0.006893282 0.992064347 0.004293743      neural
## Hi_GW16_8    0.006844014 0.004769146 0.986799813 0.005588052      neural
## Hi_GW16_9    0.008829461 0.008264305 0.993223714 0.004011645      neural
## Hi_GW16_20   0.004986853 0.004648923 0.999480300 0.003178361      neural
## Hi_GW16_23   0.022552112 0.005048620 0.997510411 0.004086562      neural
## Hi_GW16_24   0.007571600 0.003693667 0.998725159 0.004298216      neural
## Hi_GW16_26   0.007918428 0.007452061 0.994968266 0.004012722      neural&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can obtain a contingency table showing the prediction results versus the true cell type labels.
First, we assign the metadata containing the true cell types to the &lt;code&gt;predMeta&lt;/code&gt; slot&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scp@predMeta &amp;lt;- test_info&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can use the &lt;code&gt;crossTab()&lt;/code&gt; function to obtain the contingency table. The &lt;code&gt;true&lt;/code&gt; parameter indicates the column in &lt;code&gt;predMeta&lt;/code&gt; that contains the true labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scp, true = &amp;quot;cell_type2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             blood dermal neural pluripotent
## blood           1   0.00      0           0
## dermal          0   0.97      0           0
## neural          0   0.00      1           0
## pluripotent     0   0.00      0           1
## unassigned      0   0.03      0           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rows correspond to the prediction labels provided by &lt;code&gt;scPred&lt;/code&gt; and the columns to the &lt;code&gt;true&lt;/code&gt; column in &lt;code&gt;@predMeta&lt;/code&gt;
By default &lt;code&gt;crossTab&lt;/code&gt; returns the proportion of cells classified for each possible group. Set &lt;code&gt;prop = FALSE&lt;/code&gt; to get the cell counts instead of proportions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scp, true = &amp;quot;cell_type2&amp;quot;, prop = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             blood dermal neural pluripotent
## blood          33      0      0           0
## dermal          0     28      0           0
## neural          0      0     19           0
## pluripotent     0      0      0           7
## unassigned      0      1      0           0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot the probabilities using the &lt;code&gt;plotPredProbs&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plotPredProbs(scp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-06-introduction-to-scpred_files/figure-html/plot_prediction_porbs-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the previous plot, each panel represents the predictions each cell type across the different models. Each distribution and its colors represent the cell type evaluated by each prediction model in &lt;code&gt;@train&lt;/code&gt;. We can observe that all blood, neural and pluripotent cells were correctly classified using a threshold of &lt;code&gt;0.9&lt;/code&gt;. Only one dermal cell was labeled as &lt;strong&gt;unassigned&lt;/strong&gt; as it was below the threshold. This cell has a probability of &lt;code&gt;0.75&lt;/code&gt; of being dermal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reproducibility&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(width = 90)
devtools::session_info(include_base = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ─────────────────────────────────────────────────────────────────────────
##  setting  value                                      
##  version  R version 3.5.3 Patched (2019-03-11 r77192)
##  os       macOS Mojave 10.14.6                       
##  system   x86_64, darwin15.6.0                       
##  ui       X11                                        
##  language (EN)                                       
##  collate  en_AU.UTF-8                                
##  ctype    en_AU.UTF-8                                
##  tz       America/Mexico_City                        
##  date     2020-01-10                                 
## 
## ─ Packages ─────────────────────────────────────────────────────────────────────────────
##  ! package              * version    date       lib
##    assertthat             0.2.1      2019-03-21 [1]
##    backports              1.1.5      2019-10-02 [1]
##    base                 * 3.5.3      2019-12-12 [?]
##    Biobase              * 2.42.0     2018-10-30 [1]
##    BiocGenerics         * 0.28.0     2018-10-30 [1]
##    BiocParallel         * 1.16.6     2019-02-17 [1]
##    bitops                 1.0-6      2013-08-17 [1]
##    blogdown               0.17       2019-11-13 [1]
##    bookdown               0.16       2019-11-22 [1]
##    broom                  0.5.3      2019-12-14 [1]
##    callr                  3.4.0      2019-12-09 [1]
##    caret                * 6.0-85     2020-01-07 [1]
##    cellranger             1.1.0      2016-07-27 [1]
##    class                  7.3-15     2019-01-01 [1]
##    cli                    2.0.1      2020-01-08 [1]
##    codetools              0.2-16     2018-12-24 [1]
##    colorspace             1.4-1      2019-03-18 [1]
##  P compiler               3.5.3      2019-12-12 [1]
##    cowplot                1.0.0      2019-07-11 [1]
##    crayon                 1.3.4      2017-09-16 [1]
##    data.table             1.12.8     2019-12-09 [1]
##  P datasets             * 3.5.3      2019-12-12 [1]
##    DBI                    1.1.0      2019-12-15 [1]
##    dbplyr                 1.4.2      2019-06-17 [1]
##    DelayedArray         * 0.8.0      2018-10-30 [1]
##    desc                   1.2.0      2018-05-01 [1]
##    devtools               2.2.1      2019-09-24 [1]
##    digest                 0.6.23     2019-11-23 [1]
##    dplyr                * 0.8.3      2019-07-04 [1]
##    ellipsis               0.3.0      2019-09-20 [1]
##    evaluate               0.14       2019-05-28 [1]
##    fansi                  0.4.1      2020-01-08 [1]
##    farver                 2.0.1      2019-11-13 [1]
##    forcats              * 0.4.0      2019-02-17 [1]
##    foreach                1.4.7      2019-07-27 [1]
##    fs                     1.3.1      2019-05-06 [1]
##    generics               0.0.2      2018-11-29 [1]
##    GenomeInfoDb         * 1.18.2     2019-02-12 [1]
##    GenomeInfoDbData       1.2.0      2020-01-10 [1]
##    GenomicRanges        * 1.34.0     2018-10-30 [1]
##    ggplot2              * 3.2.1      2019-08-10 [1]
##    glue                   1.3.1      2019-03-12 [1]
##    gower                  0.2.1      2019-05-14 [1]
##  P graphics             * 3.5.3      2019-12-12 [1]
##  P grDevices            * 3.5.3      2019-12-12 [1]
##  P grid                   3.5.3      2019-12-12 [1]
##    gtable                 0.3.0      2019-03-25 [1]
##    haven                  2.2.0      2019-11-08 [1]
##    hms                    0.5.3      2020-01-08 [1]
##    htmltools              0.4.0      2019-10-04 [1]
##    httr                   1.4.1      2019-08-05 [1]
##    ipred                  0.9-9      2019-04-28 [1]
##    IRanges              * 2.16.0     2018-10-30 [1]
##    irlba                * 2.3.3      2019-02-05 [1]
##    iterators              1.0.12     2019-07-26 [1]
##    jsonlite               1.6        2018-12-07 [1]
##    kernlab              * 0.9-29     2019-11-12 [1]
##    knitr                  1.26       2019-11-12 [1]
##    labeling               0.3        2014-08-23 [1]
##    lattice              * 0.20-38    2018-11-04 [1]
##    lava                   1.6.6      2019-08-01 [1]
##    lazyeval               0.2.2      2019-03-15 [1]
##    lifecycle              0.1.0      2019-08-01 [1]
##    lubridate              1.7.4      2018-04-11 [1]
##    magrittr               1.5        2014-11-22 [1]
##    MASS                   7.3-51.1   2018-11-01 [1]
##    Matrix               * 1.2-15     2018-11-01 [1]
##    matrixStats          * 0.55.0     2019-09-07 [1]
##    memoise                1.1.0      2017-04-21 [1]
##  P methods              * 3.5.3      2019-12-12 [1]
##    MLmetrics            * 1.1.1      2016-05-13 [1]
##    ModelMetrics           1.2.2      2018-11-03 [1]
##    modelr                 0.1.5      2019-08-08 [1]
##    munsell                0.5.0      2018-06-12 [1]
##    nlme                   3.1-137    2018-04-07 [1]
##    nnet                   7.3-12     2016-02-02 [1]
##  P parallel             * 3.5.3      2019-12-12 [1]
##    pbapply                1.4-2      2019-08-31 [1]
##    pillar                 1.4.3      2019-12-20 [1]
##    pkgbuild               1.0.6      2019-10-09 [1]
##    pkgconfig              2.0.3      2019-09-22 [1]
##    pkgload                1.0.2      2018-10-29 [1]
##    plyr                   1.8.5      2019-12-10 [1]
##    prettyunits            1.1.0      2020-01-09 [1]
##    pROC                   1.15.3     2019-07-21 [1]
##    processx               3.4.1      2019-07-18 [1]
##    prodlim                2019.11.13 2019-11-17 [1]
##    ps                     1.3.0      2018-12-21 [1]
##    purrr                * 0.3.3      2019-10-18 [1]
##    R6                     2.4.1      2019-11-12 [1]
##    RColorBrewer           1.1-2      2014-12-07 [1]
##    Rcpp                   1.0.3      2019-11-08 [1]
##    RCurl                  1.95-4.12  2019-03-04 [1]
##    readr                * 1.3.1      2018-12-21 [1]
##    readxl                 1.3.1      2019-03-13 [1]
##    recipes                0.1.9      2020-01-07 [1]
##    remotes                2.1.0      2019-06-24 [1]
##    reprex                 0.3.0      2019-05-16 [1]
##    reshape2               1.4.3      2017-12-11 [1]
##    rlang                  0.4.2      2019-11-23 [1]
##    rmarkdown              2.0        2019-12-12 [1]
##    rpart                  4.1-13     2018-02-23 [1]
##    rprojroot              1.3-2      2018-01-03 [1]
##    rstudioapi             0.10       2019-03-19 [1]
##    rvest                  0.3.5      2019-11-08 [1]
##    S4Vectors            * 0.20.1     2018-11-09 [1]
##    scales                 1.1.0      2019-11-18 [1]
##    scPred               * 0.0.0.9000 2020-01-10 [1]
##    sessioninfo            1.1.1      2018-11-05 [1]
##    SingleCellExperiment * 1.4.1      2019-01-04 [1]
##  P splines                3.5.3      2019-12-12 [1]
##  P stats                * 3.5.3      2019-12-12 [1]
##  P stats4               * 3.5.3      2019-12-12 [1]
##    stringi                1.4.4      2020-01-09 [1]
##    stringr              * 1.4.0      2019-02-10 [1]
##    SummarizedExperiment * 1.12.0     2018-10-30 [1]
##    survival               2.43-3     2018-11-26 [1]
##    testthat               2.3.1      2019-12-01 [1]
##    tibble               * 2.1.3      2019-06-06 [1]
##    tidyr                * 1.0.0      2019-09-11 [1]
##    tidyselect             0.2.5      2018-10-11 [1]
##    tidyverse            * 1.3.0      2019-11-21 [1]
##    timeDate               3043.102   2018-02-21 [1]
##  P tools                  3.5.3      2019-12-12 [1]
##    usethis                1.5.1      2019-07-04 [1]
##  P utils                * 3.5.3      2019-12-12 [1]
##    vctrs                  0.2.1      2019-12-17 [1]
##    withr                  2.1.2      2018-03-15 [1]
##    xfun                   0.11       2019-11-12 [1]
##    xml2                   1.2.2      2019-08-09 [1]
##    XVector                0.22.0     2018-10-30 [1]
##    yaml                   2.2.0      2018-07-25 [1]
##    zeallot                0.1.0      2018-01-28 [1]
##    zlibbioc               1.28.0     2018-10-30 [1]
##  source                                   
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  local                                    
##  Bioconductor                             
##  Bioconductor                             
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  local                                    
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  local                                    
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
##  Bioconductor                             
##  Bioconductor                             
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  local                                    
##  local                                    
##  local                                    
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  Bioconductor                             
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.3)                           
##  local                                    
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  Bioconductor                             
##  CRAN (R 3.5.2)                           
##  Github (powellgenomicslab/scPred@b7f23ed)
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
##  local                                    
##  local                                    
##  local                                    
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  Bioconductor                             
##  CRAN (R 3.5.3)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.2)                           
##  local                                    
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.2)                           
##  CRAN (R 3.5.2)                           
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
## 
## [1] /Library/Frameworks/R.framework/Versions/3.5/Versions/3.5/Resources/library
## 
##  P ── Loaded and on-disk path mismatch.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>scPred: Cell type prediction at single cell resolution</title>
      <link>/publication/scpred/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 -0600</pubDate>
      
      <guid>/publication/scpred/</guid>
      <description></description>
    </item>
    
    <item>
      <title>scPred integration with Seurat</title>
      <link>/post/scpred-integration-with-seurat/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/scpred-integration-with-seurat/</guid>
      <description>


&lt;p&gt;In this tutorial, I’ll show how to incorporate prediction analyses using Seurat along with scPred.&lt;/p&gt;
&lt;p&gt;First, we’ll load &lt;code&gt;scPred&lt;/code&gt; and the &lt;code&gt;tidyverse&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(scPred)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s load &lt;code&gt;Seurat&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Seurat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll work with a dataset obtained to analyze the ventral midbrain development in human (see &lt;a href=&#34;http://dx.doi.org/10.1016/j.cell.2016.09.027&#34;&gt;&lt;em&gt;Molecular Diversity of Midbrain Development in Mouse, Human, and Stem Cells&lt;/em&gt;&lt;/a&gt;). The data will be downloaded from &lt;a href=&#34;https://hemberg-lab.github.io/scRNA.seq.datasets/human/brain/&#34;&gt;Hemberg’s lab&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/manno_human.rds&amp;quot;, destfile = &amp;quot;~/Downloads/manno_human.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we import the data and convert the &lt;code&gt;scater&lt;/code&gt; object into &lt;code&gt;Seurat&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;midbrain &amp;lt;- readRDS(&amp;quot;~/Downloads/manno_human.rds&amp;quot;)
midbrain &amp;lt;- Convert(from = midbrain, to = &amp;quot;seurat&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To show the training and prediction steps we’ll split the data into two partitions. First, we generate random indices to select 75% of the total number of cells for training:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- length(midbrain@cell.names)
set.seed(66)
i &amp;lt;- sample(seq_len(n), size = n * 0.75)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this indices, we can subset the Seurat object to create two objects containing the training and test data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainData &amp;lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[i])
testData &amp;lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[-i])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We normalize and scale the data using Seurat. The most variable genes are also identified in order to perform dimensionality reduction.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainData %&amp;gt;% 
  NormalizeData(normalization.method = &amp;quot;LogNormalize&amp;quot;, 
                scale.factor = 10000) %&amp;gt;% 
    FindVariableGenes(mean.function = ExpMean, 
                      dispersion.function = LogVMR, 
                      x.low.cutoff = 0.0125, 
                      x.high.cutoff = 3, 
                      y.cutoff = 0.5, 
                      do.plot = FALSE) %&amp;gt;% 
    ScaleData() -&amp;gt; trainData&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Scaling data matrix&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;principal-component-analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Principal component analysis&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;scPred&lt;/code&gt; finds a set of discriminative principal components as features to perform the predictions. Using Seurat, we’ll perform a PCA and visualize the results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainData &amp;lt;- RunPCA(trainData, do.print = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this tutorial we’ll focus on predicting the source of the dopaminergic neurons (&lt;strong&gt;ESCs - embryonic stem cells, iPSCs - induced pluripotent stem cells, and ventral midbrain cells&lt;/strong&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;PCAPlot(trainData, group = &amp;quot;Source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-16-scpred-integration-with-seurat_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-feature-space&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Get feature space&lt;/h1&gt;
&lt;p&gt;The function &lt;code&gt;getFeatureSpace()&lt;/code&gt; from &lt;em&gt;scPred&lt;/em&gt; can handle Seurat objects as input. The Seurat object must contain a principal component analysis computed already. Here, we provide the &lt;code&gt;trainData&lt;/code&gt; object and specify the variable in the metadata slot containing the cell class of interest (e.g. &lt;em&gt;Source&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scpred &amp;lt;- getFeatureSpace(trainData, pVar = &amp;quot;Source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Not all the classes are valid R variable names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following classes are renamed: 
## ventral midbrain&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## See new classes in &amp;#39;Source.valid&amp;#39; column in metadata:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ventral.midbrain&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## DONE!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we obtain the feature space, the output of the &lt;code&gt;getFeatureSpace()&lt;/code&gt; function is a &lt;code&gt;scPred&lt;/code&gt; object which contains the normalized expression data, the principal component analysis and the metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-training&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Model training&lt;/h1&gt;
&lt;p&gt;Now we’ll train a support vector machine with a radial kernel using &lt;code&gt;scPred&lt;/code&gt; using the &lt;code&gt;trainData&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scpred &amp;lt;- trainModel(scpred)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;prediction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prediction&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;scPredict()&lt;/code&gt; function can also handle Seurat objects containing the gene expression data of the cells to be predicted. This functions returns a dataframe stored in the &lt;code&gt;@predictions&lt;/code&gt; slot with the class probabilities and the predicted class for each cell in the test dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scpred &amp;lt;- scPredict(scpred, newData = testData)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Scaling data matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Predicting cell types&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can get the predictions using the &lt;code&gt;getPredictions()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getPredictions(scpred) %&amp;gt;% head(n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 ventral.midbrain       ESCs        iPSCs  predClass
## 1772122_302_C04     6.017780e-04 0.02568502 0.6178537020 unassigned
## 1772122_302_D11     1.331316e-02 0.52307041 0.0070626037 unassigned
## 1772122_180_A06     6.288517e-04 0.99779341 0.0007134394       ESCs
## 1772122_300_E06     1.833807e-05 0.99998932 0.0001600490       ESCs
## 1772122_300_F10     1.020733e-05 0.99995711 0.0001408679       ESCs
## 1772122_301_C12     2.308561e-03 0.98552436 0.0027696475       ESCs
## 1772122_299_H11     1.973662e-06 0.99998539 0.0002169245       ESCs
## 1772122_301_A02     3.782298e-03 0.99011928 0.0019142387       ESCs
## 1772122_300_D02     1.849093e-05 0.99996094 0.0001692000       ESCs
## 1772122_302_A08     4.622436e-05 0.96686430 0.2695268815       ESCs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to get the accuracy of &lt;code&gt;scPred&lt;/code&gt;, well add the test metadata to the &lt;code&gt;@predMeta&lt;/code&gt; slot. The number of rows in the metadata must match the number of cells that were predicted.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scpred@predMeta &amp;lt;- testData@meta.data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the test metadata stored in the &lt;code&gt;scPred&lt;/code&gt; object, we can use the &lt;code&gt;crossTab&lt;/code&gt; function to get a contingency table showing the predictions versus the true cell classes. In this case, the column &lt;em&gt;Source&lt;/em&gt; of the test metadata contains the true cell labels:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We reorder the rows of the contingency table to match the true cell categories&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scpred, &amp;quot;Source&amp;quot;)[c(1,2,4,3),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  ESCs iPSCs ventral midbrain
## ESCs             0.97  0.03                0
## iPSCs            0.00  0.97                0
## ventral.midbrain 0.00  0.00                1
## unassigned       0.03  0.00                0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Along the diagonal we can see the sensitivity of scPred per class. We can get the same table with counts too:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossTab(scpred, &amp;quot;Source&amp;quot;, prop = FALSE)[c(1,2,4,3),]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  ESCs iPSCs ventral midbrain
## ESCs              422     3                0
## iPSCs               0    83                0
## ventral.midbrain    0     0              485
## unassigned         15     0                0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Session info&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(width = 70)
devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ─────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.5.1 (2018-07-02)
##  os       macOS High Sierra 10.13.6   
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_AU.UTF-8                 
##  ctype    en_AU.UTF-8                 
##  tz       Australia/Sydney            
##  date     2019-01-16                  
## 
## ─ Packages ─────────────────────────────────────────────────────────
##  package              * version    date       lib source        
##  abind                  1.4-5      2016-07-21 [1] CRAN (R 3.5.0)
##  acepack                1.4.1      2016-10-29 [1] CRAN (R 3.5.0)
##  ape                    5.2        2018-09-24 [1] CRAN (R 3.5.0)
##  assertthat             0.2.0      2017-04-11 [1] CRAN (R 3.5.0)
##  backports              1.1.2      2017-12-13 [1] CRAN (R 3.5.0)
##  base64enc              0.1-3      2015-07-28 [1] CRAN (R 3.5.0)
##  bibtex                 0.4.2      2017-06-30 [1] CRAN (R 3.5.0)
##  bindr                  0.1.1      2018-03-13 [1] CRAN (R 3.5.0)
##  bindrcpp             * 0.2.2      2018-03-29 [1] CRAN (R 3.5.0)
##  Biobase              * 2.42.0     2018-10-30 [1] Bioconductor  
##  BiocGenerics         * 0.28.0     2018-10-30 [1] Bioconductor  
##  BiocParallel         * 1.16.0     2018-10-30 [1] Bioconductor  
##  bit                    1.1-14     2018-05-29 [1] CRAN (R 3.5.0)
##  bit64                  0.9-7      2017-05-08 [1] CRAN (R 3.5.0)
##  bitops                 1.0-6      2013-08-17 [1] CRAN (R 3.5.0)
##  blogdown               0.9        2018-10-23 [1] CRAN (R 3.5.0)
##  bookdown               0.8        2018-12-03 [1] CRAN (R 3.5.0)
##  broom                  0.5.0      2018-07-17 [1] CRAN (R 3.5.0)
##  callr                  3.0.0      2018-08-24 [1] CRAN (R 3.5.0)
##  caret                * 6.0-80     2018-05-26 [1] CRAN (R 3.5.0)
##  caTools                1.17.1.1   2018-07-20 [1] CRAN (R 3.5.0)
##  cellranger             1.1.0      2016-07-27 [1] CRAN (R 3.5.0)
##  checkmate              1.8.5      2017-10-24 [1] CRAN (R 3.5.0)
##  class                  7.3-14     2015-08-30 [1] CRAN (R 3.5.1)
##  cli                    1.0.1      2018-09-25 [1] CRAN (R 3.5.0)
##  cluster                2.0.7-1    2018-04-13 [1] CRAN (R 3.5.0)
##  codetools              0.2-15     2016-10-05 [1] CRAN (R 3.5.1)
##  colorspace             1.3-2      2016-12-14 [1] CRAN (R 3.5.0)
##  cowplot              * 0.9.3      2018-07-15 [1] CRAN (R 3.5.0)
##  crayon                 1.3.4      2017-09-16 [1] CRAN (R 3.5.0)
##  CVST                   0.2-2      2018-05-26 [1] CRAN (R 3.5.0)
##  data.table             1.11.8     2018-09-30 [1] CRAN (R 3.5.0)
##  ddalpha                1.3.4      2018-06-23 [1] CRAN (R 3.5.0)
##  DelayedArray         * 0.8.0      2018-10-30 [1] Bioconductor  
##  DEoptimR               1.0-8      2016-11-19 [1] CRAN (R 3.5.0)
##  desc                   1.2.0      2018-05-01 [1] CRAN (R 3.5.0)
##  devtools               2.0.1      2018-10-26 [1] CRAN (R 3.5.1)
##  digest                 0.6.18     2018-10-10 [1] CRAN (R 3.5.0)
##  dimRed                 0.1.0      2017-05-04 [1] CRAN (R 3.5.0)
##  diptest                0.75-7     2016-12-05 [1] CRAN (R 3.5.0)
##  doSNOW                 1.0.16     2017-12-13 [1] CRAN (R 3.5.0)
##  dplyr                * 0.7.8      2018-11-10 [1] CRAN (R 3.5.0)
##  DRR                    0.0.3      2018-01-06 [1] CRAN (R 3.5.0)
##  dtw                    1.20-1     2018-05-18 [1] CRAN (R 3.5.0)
##  evaluate               0.12       2018-10-09 [1] CRAN (R 3.5.0)
##  fitdistrplus           1.0-11     2018-09-10 [1] CRAN (R 3.5.0)
##  flexmix                2.3-14     2017-04-28 [1] CRAN (R 3.5.0)
##  forcats              * 0.3.0      2018-02-19 [1] CRAN (R 3.5.0)
##  foreach                1.4.4      2017-12-12 [1] CRAN (R 3.5.0)
##  foreign                0.8-71     2018-07-20 [1] CRAN (R 3.5.0)
##  Formula                1.2-3      2018-05-03 [1] CRAN (R 3.5.0)
##  fpc                    2.1-11.1   2018-07-20 [1] CRAN (R 3.5.0)
##  fs                     1.2.6      2018-08-23 [1] CRAN (R 3.5.0)
##  gbRd                   0.4-11     2012-10-01 [1] CRAN (R 3.5.0)
##  gdata                  2.18.0     2017-06-06 [1] CRAN (R 3.5.0)
##  GenomeInfoDb         * 1.18.1     2018-11-12 [1] Bioconductor  
##  GenomeInfoDbData       1.2.0      2018-11-07 [1] Bioconductor  
##  GenomicRanges        * 1.34.0     2018-10-30 [1] Bioconductor  
##  geometry               0.3-6      2015-09-09 [1] CRAN (R 3.5.0)
##  ggplot2              * 3.1.0      2018-10-25 [1] CRAN (R 3.5.0)
##  ggridges               0.5.1      2018-09-27 [1] CRAN (R 3.5.0)
##  glue                   1.3.0      2018-07-17 [1] CRAN (R 3.5.0)
##  gower                  0.1.2      2017-02-23 [1] CRAN (R 3.5.0)
##  gplots                 3.0.1      2016-03-30 [1] CRAN (R 3.5.0)
##  gridExtra              2.3        2017-09-09 [1] CRAN (R 3.5.0)
##  gtable                 0.2.0      2016-02-26 [1] CRAN (R 3.5.0)
##  gtools                 3.8.1      2018-06-26 [1] CRAN (R 3.5.0)
##  haven                  1.1.2      2018-06-27 [1] CRAN (R 3.5.0)
##  hdf5r                  1.0.1      2018-10-07 [1] CRAN (R 3.5.0)
##  Hmisc                  4.1-1      2018-01-03 [1] CRAN (R 3.5.0)
##  hms                    0.4.2      2018-03-10 [1] CRAN (R 3.5.0)
##  htmlTable              1.12       2018-05-26 [1] CRAN (R 3.5.0)
##  htmltools              0.3.6      2017-04-28 [1] CRAN (R 3.5.0)
##  htmlwidgets            1.3        2018-09-30 [1] CRAN (R 3.5.0)
##  httr                   1.3.1      2017-08-20 [1] CRAN (R 3.5.0)
##  ica                    1.0-2      2018-05-24 [1] CRAN (R 3.5.0)
##  igraph                 1.2.2      2018-07-27 [1] CRAN (R 3.5.0)
##  ipred                  0.9-8      2018-11-05 [1] CRAN (R 3.5.0)
##  IRanges              * 2.16.0     2018-10-30 [1] Bioconductor  
##  irlba                * 2.3.2      2018-01-11 [1] CRAN (R 3.5.0)
##  iterators              1.0.10     2018-07-13 [1] CRAN (R 3.5.0)
##  jsonlite               1.5        2017-06-01 [1] CRAN (R 3.5.0)
##  kernlab              * 0.9-27     2018-08-10 [1] CRAN (R 3.5.0)
##  KernSmooth             2.23-15    2015-06-29 [1] CRAN (R 3.5.1)
##  knitr                  1.20       2018-02-20 [1] CRAN (R 3.5.0)
##  labeling               0.3        2014-08-23 [1] CRAN (R 3.5.0)
##  lars                   1.2        2013-04-24 [1] CRAN (R 3.5.0)
##  lattice              * 0.20-38    2018-11-04 [1] CRAN (R 3.5.0)
##  latticeExtra           0.6-28     2016-02-09 [1] CRAN (R 3.5.0)
##  lava                   1.6.3      2018-08-10 [1] CRAN (R 3.5.0)
##  lazyeval               0.2.1      2017-10-29 [1] CRAN (R 3.5.0)
##  lmtest                 0.9-36     2018-04-04 [1] CRAN (R 3.5.0)
##  lsei                   1.2-0      2017-10-23 [1] CRAN (R 3.5.0)
##  lubridate              1.7.4      2018-04-11 [1] CRAN (R 3.5.0)
##  magic                  1.5-9      2018-09-17 [1] CRAN (R 3.5.0)
##  magrittr               1.5        2014-11-22 [1] CRAN (R 3.5.0)
##  MASS                   7.3-51.1   2018-11-01 [1] CRAN (R 3.5.0)
##  Matrix               * 1.2-15     2018-11-01 [1] CRAN (R 3.5.0)
##  matrixStats          * 0.54.0     2018-07-23 [1] CRAN (R 3.5.0)
##  mclust                 5.4.2      2018-11-17 [1] CRAN (R 3.5.0)
##  memoise                1.1.0      2017-04-21 [1] CRAN (R 3.5.0)
##  metap                  1.0        2018-07-25 [1] CRAN (R 3.5.0)
##  mixtools               1.1.0      2017-03-10 [1] CRAN (R 3.5.0)
##  ModelMetrics           1.2.2      2018-11-03 [1] CRAN (R 3.5.0)
##  modelr                 0.1.2      2018-05-11 [1] CRAN (R 3.5.0)
##  modeltools             0.2-22     2018-07-16 [1] CRAN (R 3.5.0)
##  munsell                0.5.0      2018-06-12 [1] CRAN (R 3.5.0)
##  mvtnorm                1.0-8      2018-05-31 [1] CRAN (R 3.5.0)
##  nlme                   3.1-137    2018-04-07 [1] CRAN (R 3.5.1)
##  nnet                   7.3-12     2016-02-02 [1] CRAN (R 3.5.1)
##  npsurv                 0.4-0      2017-10-14 [1] CRAN (R 3.5.0)
##  pbapply                1.3-4      2018-01-10 [1] CRAN (R 3.5.0)
##  pillar                 1.3.0      2018-07-14 [1] CRAN (R 3.5.0)
##  pkgbuild               1.0.2      2018-10-16 [1] CRAN (R 3.5.1)
##  pkgconfig              2.0.2      2018-08-16 [1] CRAN (R 3.5.0)
##  pkgload                1.0.2      2018-10-29 [1] CRAN (R 3.5.0)
##  pls                    2.7-0      2018-08-21 [1] CRAN (R 3.5.0)
##  plyr                   1.8.4      2016-06-08 [1] CRAN (R 3.5.0)
##  png                    0.1-7      2013-12-03 [1] CRAN (R 3.5.0)
##  prabclus               2.2-6      2015-01-14 [1] CRAN (R 3.5.0)
##  prettyunits            1.0.2      2015-07-13 [1] CRAN (R 3.5.0)
##  processx               3.2.0      2018-08-16 [1] CRAN (R 3.5.0)
##  prodlim                2018.04.18 2018-04-18 [1] CRAN (R 3.5.0)
##  proxy                  0.4-22     2018-04-08 [1] CRAN (R 3.5.0)
##  ps                     1.2.1      2018-11-06 [1] CRAN (R 3.5.0)
##  purrr                * 0.2.5      2018-05-29 [1] CRAN (R 3.5.0)
##  R.methodsS3            1.7.1      2016-02-16 [1] CRAN (R 3.5.0)
##  R.oo                   1.22.0     2018-04-22 [1] CRAN (R 3.5.0)
##  R.utils                2.7.0      2018-08-27 [1] CRAN (R 3.5.0)
##  R6                     2.3.0      2018-10-04 [1] CRAN (R 3.5.0)
##  RANN                   2.6        2018-07-16 [1] CRAN (R 3.5.0)
##  RColorBrewer           1.1-2      2014-12-07 [1] CRAN (R 3.5.0)
##  Rcpp                   1.0.0      2018-11-07 [1] CRAN (R 3.5.0)
##  RcppRoll               0.3.0      2018-06-05 [1] CRAN (R 3.5.0)
##  RCurl                  1.95-4.11  2018-07-15 [1] CRAN (R 3.5.0)
##  Rdpack                 0.10-1     2018-10-04 [1] CRAN (R 3.5.0)
##  readr                * 1.1.1      2017-05-16 [1] CRAN (R 3.5.0)
##  readxl                 1.1.0      2018-04-20 [1] CRAN (R 3.5.0)
##  recipes                0.1.3      2018-06-16 [1] CRAN (R 3.5.0)
##  remotes                2.0.2      2018-10-30 [1] CRAN (R 3.5.1)
##  reshape2               1.4.3      2017-12-11 [1] CRAN (R 3.5.0)
##  reticulate             1.10       2018-08-05 [1] CRAN (R 3.5.0)
##  rlang                  0.3.0.1    2018-10-25 [1] CRAN (R 3.5.0)
##  rmarkdown              1.10       2018-06-11 [1] CRAN (R 3.5.0)
##  robustbase             0.93-3     2018-09-21 [1] CRAN (R 3.5.0)
##  ROCR                   1.0-7      2015-03-26 [1] CRAN (R 3.5.0)
##  rpart                  4.1-13     2018-02-23 [1] CRAN (R 3.5.1)
##  rprojroot              1.3-2      2018-01-03 [1] CRAN (R 3.5.0)
##  rstudioapi             0.8        2018-10-02 [1] CRAN (R 3.5.0)
##  Rtsne                  0.15       2018-11-10 [1] CRAN (R 3.5.0)
##  rvest                  0.3.2      2016-06-17 [1] CRAN (R 3.5.0)
##  S4Vectors            * 0.20.1     2018-11-09 [1] Bioconductor  
##  scales                 1.0.0      2018-08-09 [1] CRAN (R 3.5.0)
##  scPred               * 0.0.0.9000 2018-12-06 [1] local         
##  SDMTools               1.1-221    2014-08-05 [1] CRAN (R 3.5.0)
##  segmented              0.5-3.0    2017-11-30 [1] CRAN (R 3.5.0)
##  sessioninfo            1.1.1      2018-11-05 [1] CRAN (R 3.5.0)
##  Seurat               * 2.3.4      2018-07-17 [1] CRAN (R 3.5.0)
##  sfsmisc                1.1-2      2018-03-05 [1] CRAN (R 3.5.0)
##  SingleCellExperiment * 1.4.0      2018-10-30 [1] Bioconductor  
##  snow                   0.4-3      2018-09-14 [1] CRAN (R 3.5.0)
##  stringi                1.2.4      2018-07-20 [1] CRAN (R 3.5.0)
##  stringr              * 1.3.1      2018-05-10 [1] CRAN (R 3.5.0)
##  SummarizedExperiment * 1.12.0     2018-10-30 [1] Bioconductor  
##  survival               2.43-1     2018-10-29 [1] CRAN (R 3.5.0)
##  tibble               * 1.4.2      2018-01-22 [1] CRAN (R 3.5.0)
##  tidyr                * 0.8.2      2018-10-28 [1] CRAN (R 3.5.0)
##  tidyselect             0.2.5      2018-10-11 [1] CRAN (R 3.5.0)
##  tidyverse            * 1.2.1      2017-11-14 [1] CRAN (R 3.5.0)
##  timeDate               3043.102   2018-02-21 [1] CRAN (R 3.5.0)
##  trimcluster            0.1-2.1    2018-07-20 [1] CRAN (R 3.5.0)
##  tsne                   0.1-3      2016-07-15 [1] CRAN (R 3.5.0)
##  usethis                1.4.0      2018-08-14 [1] CRAN (R 3.5.0)
##  withr                  2.1.2      2018-03-15 [1] CRAN (R 3.5.0)
##  xfun                   0.4        2018-10-23 [1] CRAN (R 3.5.0)
##  xml2                   1.2.0      2018-01-24 [1] CRAN (R 3.5.0)
##  XVector                0.22.0     2018-10-30 [1] Bioconductor  
##  yaml                   2.2.0      2018-07-25 [1] CRAN (R 3.5.0)
##  zlibbioc               1.28.0     2018-10-30 [1] Bioconductor  
##  zoo                    1.8-4      2018-09-19 [1] CRAN (R 3.5.0)
## 
## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>/post/getting-started/</link>
      <pubDate>Thu, 27 Sep 2018 20:00:00 -0500</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>&lt;p&gt;I will periodically post articles related to genomics, computational biology, statistics and R.&lt;/p&gt;

&lt;p&gt;I hope you have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ascend: R package for analysis of single cell RNA-seq data</title>
      <link>/publication/ascend/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 -0500</pubDate>
      
      <guid>/publication/ascend/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0500</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>scPred: cell type prediction at single cell resolution</title>
      <link>/talk/single_cell_oz_2018/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 -0500</pubDate>
      
      <guid>/talk/single_cell_oz_2018/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  
Click on the **Slides** button above to view the built-in slides feature.

&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;em&gt;Slides&lt;/em&gt; feature and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Human splicing diversity and the extent of unannotated splice junctions across human RNA-seq samples on the Sequence Read Archive</title>
      <link>/publication/human_splicing_diversity/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 -0600</pubDate>
      
      <guid>/publication/human_splicing_diversity/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rail-RNA: scalable analysis of RNA-seq splicing and coverage</title>
      <link>/publication/rail/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 -0500</pubDate>
      
      <guid>/publication/rail/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
