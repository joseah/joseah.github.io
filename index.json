[{"authors":null,"categories":[],"content":" Summary scPred is a general method to predict cell types based on variance structure decomposition. It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.\nFor more details see our paper in Genome Biology:\nscPred: accurate supervised method for cell-type classification from single-cell RNA-seq data\n Application of scPred First, we load the scPred package, and tidyverse.\nlibrary(\u0026quot;scPred\u0026quot;) library(\u0026quot;tidyverse\u0026quot;) We will work with single cell data from pluripotent, blood, skin and neural cells sequenced at low coverage. For more details about the study, see Low-coverage single-cell mRNA sequencing reveals cellular heterogeneity and activated signaling pathways in developing cerebral cortex.\nThe count matrix and metadata may be obtained here from Hemberg’s lab.\nRead the gene expression data (SingleCellExperiment object), calculate CPM values and extract metadata.\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds\u0026quot;, destfile = \u0026quot;~/Downloads/pollen.rds\u0026quot;) require(\u0026quot;SingleCellExperiment\u0026quot;) pollen \u0026lt;- readRDS(\u0026quot;~/Downloads/pollen.rds\u0026quot;) For demonstration purposes, we apply a standard CPM normalization, however any other normalization approach may be used.\npollen_counts \u0026lt;- normcounts(pollen) pollen_cpm \u0026lt;- apply(pollen_counts, 2, function(x) (x/sum(x))*1000000) pollen_metadata \u0026lt;- as.data.frame(colData(pollen)) Let’s explore the cell type information\ntable(pollen_metadata$cell_type2) ## ## blood dermal neural pluripotent ## 113 99 65 24 A total of 301 cells are included in the dataset.\nFor demostration purposes, we split a gene expression matrix into two groups (train and test datasets) based cell type information using the createDataPartition() function from the caret package (already loaded with scPred).\nThe train partition will be used to train a prediction models for each cell type and finally, the models will be tested using the test partition.\nset.seed(1234) i \u0026lt;- createDataPartition(pollen_metadata$cell_type2, p = 0.70, list = FALSE) train_data \u0026lt;- pollen_cpm[, i] test_data \u0026lt;- pollen_cpm[, -i] train_info \u0026lt;- pollen_metadata[i, , drop = FALSE] test_info \u0026lt;- pollen_metadata[-i, , drop = FALSE]  Training step Eigendecomposition The first part of the scPred algorithm consists on decomposing the gene expresion matrix of the training dataset to obtained a low dimensional space that can describe most of the variance of the dataset. The eigenDecompose function calculates the first n principal components and log-transforms the input gene expression values to stabilize the variance. It returns an scPred object.\nset.seed(1234) scp \u0026lt;- eigenDecompose(train_data, n = 10) Then, we assign the metadata containing the cell type information. Row names in the metadata dataframe must match the row names from the eigendecompsed gene expression matrix.\nscPred::metadata(scp) \u0026lt;- train_info  Feature selection Next, we select the principal components that explain the class identity of each cell type using the getFeatureSpace function. This function applies a Wilcoxcon rank sum test to determine the informative principal components according to a categorical variable variable. In this case, we want to predict the cell types in the cell_type2 columns from the metadata. Run ?getFeatureSpace for more details.\nscp \u0026lt;- getFeatureSpace(scp, pVar = \u0026quot;cell_type2\u0026quot;) ## ## DONE! The features slot contains the principal components that explain the class identity.\n pValue contains the associated p-value for each principal component obtained using the Wilcoxon Rank sum test pValueAdj is the adjusted p-value depending omn the correction criterion applied. By defauls a false discovery rate corrections is performed expVar contrains the explained variance by each principal component cumExpVar contains the cumulative variance explained  All prrincipal components for each cell type are ranked by p-value.\nscp@features ## $blood ## PC pValue pValueAdj expVar cumExpVar ## 1 PC2 6.186072e-26 6.186072e-25 20.291116 20.29112 ## 2 PC5 3.594918e-10 1.797459e-09 8.573597 28.86471 ## 3 PC3 2.822222e-08 9.407408e-08 11.433759 40.29847 ## 4 PC4 2.866624e-07 7.166560e-07 10.080527 50.37900 ## ## $dermal ## PC pValue pValueAdj expVar cumExpVar ## 1 PC2 1.378227e-29 1.378227e-28 20.29112 20.29112 ## 2 PC1 1.300270e-09 6.501350e-09 26.21813 46.50925 ## 3 PC4 7.311207e-08 2.437069e-07 10.08053 56.58977 ## 4 PC6 2.872213e-05 7.180532e-05 7.26231 63.85208 ## 5 PC3 2.034155e-04 4.068310e-04 11.43376 75.28584 ## ## $neural ## PC pValue pValueAdj expVar cumExpVar ## 1 PC1 9.513036e-21 9.513036e-20 26.21813 26.21813 ## 2 PC4 1.103454e-15 5.517270e-15 10.08053 36.29866 ## 3 PC3 7.019078e-05 2.339693e-04 11.43376 47.73242 ## ## $pluripotent ## PC pValue pValueAdj expVar cumExpVar ## 1 PC6 8.590373e-12 8.590373e-11 7.262310 7.26231 ## 2 PC4 2.420729e-10 1.210364e-09 10.080527 17.34284 ## 3 PC5 1.797335e-08 5.991115e-08 8.573597 25.91643 ## 4 PC9 1.169709e-07 2.924273e-07 3.512692 29.42913 ## 5 PC8 9.169523e-05 1.833905e-04 4.313980 33.74311 ## 6 PC10 4.675783e-03 7.792971e-03 3.418549 37.16165 ## 7 PC3 1.065838e-02 1.522625e-02 11.433759 48.59541 ## 8 PC2 1.376060e-02 1.720075e-02 20.291116 68.88653 We can plot the principal components grouped by the prediction variable using the plotEigen() function\nplotEigen(scp, group = \u0026quot;cell_type2\u0026quot;)  Model training We can now train prediction models for blood, dermal, neural, and pluripotent cell types.\nscp \u0026lt;- trainModel(scp, seed = 66) If we print the scPred object we can look at a summary of the slots contained in it.\n Expression data: shows the number of cells, genes, and principal components computed. Metadata information: Show the columns in the metadata slot. If columns are factor objects, they can be used as response veriables to train a prediction model Prediction variable: Shows the prediction variable as indicated using the getFeatureSpace() function Informative PCs per class: shows the number of discriminant principal components for each class (e.g. cell type) Training: Shows the description of the classification model used for training. For each class, performance metrics such as AUROC,accuracy or kappa are shown  The four models showed a specificity of 1 and a sensitivity of 0.99 to 1.\nscp ## \u0026#39;scPred\u0026#39; object ## ## - Expression data ## Cell embeddings = 213 ## Gene loadings = 21413 ## PCs = 10 ## ## - Metadata information ## cell_type1, cell_type2 ## Prediction variable = cell_type2 ## n ## blood 80 ## dermal 70 ## neural 46 ## pluripotent 17 ## ## - Informative PCs per class ## Features ## blood 4 ## dermal 5 ## neural 3 ## pluripotent 8 ## ## - Training information ## Model: Support Vector Machines with Radial Basis Function Kernel ## ROC Sens Spec ## blood 1 0.988 1 ## dermal 1 1 1 ## neural 1 1 1 ## pluripotent 1 1 1 We can plot the distribution of probabilities to see the performance of the predictions for each cell class using\nThe getTrainPred() function extracts the predictions results obtained from the resampling step for training the prediction model.\nres \u0026lt;- getTrainPred(scp) We can plot the calculated probabilities for each cell type versus our cell labels:\nplotTrainProbs(scp) In the previous figure we can observe that a threshold of 0.9 classifies all dermal, neural and pluripotent cells correctly and almost all blood cells too. Each panel represents a prediction model and the colors the known true classes. All other cells are cells except the positive class (for example, for the blood prediction model all other cells are either dermal, neural, or pluripotent)\n  Prediction step Once the models have been trained they can be applied to predict cell types in other dataset, for this demonstration we’ll use the test partition/ scPredict() projects the training principal axes onto the test dataset and predicts the cell identity using the trained models. By default, scPredict() uses a threshold of 0.9 to classify the cells into categories.\nscp \u0026lt;- scPredict(scp, newData = test_data, threshold = 0.9) ## Predicting cell types scPredict() adds a dataframe with the probabilities of each cell to belong to any of the cell classes. The predClass columns is set using the provided threshold. Use getPredictions to obtain the prediction results\ngetPredictions(scp) ## blood dermal neural pluripotent predClass ## Hi_2338_1 0.006123324 0.998636645 0.005233951 0.005019364 dermal ## Hi_2338_2 0.005489041 0.997300365 0.004951670 0.005004615 dermal ## Hi_2338_4 0.010187334 0.993200562 0.006873631 0.004874321 dermal ## Hi_2338_5 0.016522142 0.995862379 0.004821274 0.003804431 dermal ## Hi_2338_17 0.022616641 0.902918575 0.010077217 0.005125155 dermal ## Hi_2339_7 0.993537414 0.012419789 0.005704294 0.005307202 blood ## Hi_2339_8 0.997456360 0.007476920 0.003783615 0.005414072 blood ## Hi_2339_9 0.964811628 0.006317195 0.009147236 0.005279810 blood ## Hi_2339_11 0.993138488 0.007345087 0.003570097 0.005276406 blood ## Hi_2339_14 0.965825270 0.039020020 0.004618939 0.005300889 blood ## Hi_K562_2 0.995994948 0.005850596 0.002117951 0.003947583 blood ## Hi_K562_4 0.989846416 0.007527510 0.006719613 0.004723014 blood ## Hi_K562_10 0.988174869 0.006242529 0.001941614 0.004944362 blood ## Hi_BJ_1 0.009379808 0.995308990 0.004144217 0.003948248 dermal ## Hi_BJ_2 0.007355815 0.990533882 0.006295545 0.005152778 dermal ## Hi_BJ_6 0.008640279 0.995564654 0.005810601 0.005091658 dermal ## Hi_BJ_8 0.009449915 0.993582100 0.004556145 0.005223161 dermal ## Hi_BJ_10 0.006711982 0.996512760 0.004190768 0.004438988 dermal ## Hi_BJ_11 0.006526882 0.992045697 0.004996574 0.005244542 dermal ## Hi_BJ_12 0.007324316 0.995683654 0.003649357 0.004587927 dermal ## Hi_BJ_17 0.007384141 0.994617193 0.005320201 0.005277327 dermal ## Hi_BJ_19 0.006590933 0.989325713 0.006014059 0.005327813 dermal ## Hi_BJ_30 0.007747900 0.996297145 0.004473928 0.004988351 dermal ## Hi_BJ_34 0.008671909 0.996874137 0.005283697 0.003805793 dermal ## Hi_K562_19 0.994734103 0.007015999 0.006432677 0.004045540 blood ## Hi_K562_20 0.953682269 0.009277640 0.003125867 0.004152251 blood ## Hi_K562_22 0.994510470 0.006119763 0.003131349 0.004362772 blood ## Hi_K562_23 0.996505400 0.005950772 0.004014639 0.004700119 blood ## Hi_K562_25 0.995038852 0.006129395 0.003454723 0.004748464 blood ## Hi_K562_31 0.996556253 0.005583629 0.002703881 0.004664817 blood ## Hi_K562_34 0.995336669 0.006362959 0.004093832 0.005191150 blood ## Hi_K562_36 0.996860496 0.006133019 0.004560540 0.004142104 blood ## Hi_K562_38 0.995803946 0.005917929 0.002621050 0.004637629 blood ## Hi_K562_40 0.996012758 0.005470017 0.002164893 0.004144780 blood ## Hi_K562_41 0.996704050 0.005544233 0.003122214 0.004499358 blood ## Hi_HL60_2 0.996106988 0.003324669 0.004131396 0.005789631 blood ## Hi_HL60_4 0.986368329 0.003060458 0.011125239 0.004630602 blood ## Hi_HL60_6 0.997668652 0.001253000 0.005330010 0.004892589 blood ## Hi_HL60_7 0.983055124 0.007139040 0.006636582 0.005396178 blood ## Hi_HL60_14 0.997786701 0.001179214 0.003798479 0.005328826 blood ## Hi_HL60_15 0.995527224 0.007809733 0.005628077 0.005283703 blood ## Hi_HL60_23 0.995011352 0.002649165 0.004323054 0.005546032 blood ## Hi_HL60_33 0.996878770 0.004372839 0.004306898 0.005163198 blood ## Hi_HL60_36 0.995930872 0.003268241 0.003992763 0.005030708 blood ## Hi_HL60_37 0.996629373 0.006237066 0.006042730 0.005198600 blood ## Hi_HL60_43 0.996146777 0.003797888 0.004061530 0.004958268 blood ## Hi_HL60_48 0.996702270 0.004561916 0.005002497 0.005827301 blood ## Hi_HL60_52 0.996050779 0.004534042 0.004991622 0.004939899 blood ## Hi_HL60_54 0.997467155 0.003856256 0.004382945 0.005155444 blood ## Hi_iPS_1 0.006232564 0.006533183 0.003665708 0.954170285 pluripotent ## Hi_iPS_4 0.005012228 0.006199506 0.004454188 0.936329827 pluripotent ## Hi_iPS_7 0.006688859 0.006379890 0.002807518 0.967098223 pluripotent ## Hi_iPS_8 0.005807163 0.004859432 0.055213434 0.916927688 pluripotent ## Hi_iPS_10 0.005232470 0.007047774 0.002181255 0.960387598 pluripotent ## Hi_iPS_16 0.005023918 0.006737458 0.003180962 0.955590890 pluripotent ## Hi_iPS_23 0.006016013 0.006132905 0.003981301 0.934747004 pluripotent ## Hi_Kera_2 0.005319037 0.990022204 0.005098877 0.004528966 dermal ## Hi_Kera_6 0.007068429 0.986530945 0.004578318 0.005091943 dermal ## Hi_Kera_7 0.003285155 0.996024791 0.004639087 0.003749446 dermal ## Hi_Kera_8 0.006364752 0.996656643 0.005059935 0.004002423 dermal ## Hi_Kera_9 0.009361611 0.979592390 0.004010289 0.004254760 dermal ## Hi_Kera_10 0.002129332 0.996536432 0.004454441 0.004093914 dermal ## Hi_Kera_11 0.003993649 0.992040386 0.004774811 0.003632381 dermal ## Hi_Kera_13 0.005986052 0.997052214 0.004797385 0.003822144 dermal ## Hi_Kera_14 0.012398163 0.984469207 0.004834179 0.004328234 dermal ## Hi_Kera_16 0.011141259 0.970384330 0.003735930 0.004432425 dermal ## Hi_Kera_25 0.004186716 0.994032609 0.004513197 0.003758172 dermal ## Hi_Kera_39 0.003674117 0.989921698 0.004405423 0.003955703 dermal ## Hi_Kera_40 0.073670033 0.759264834 0.004933981 0.004456876 unassigned ## Hi_GW21.2_2 0.004945588 0.005936278 0.993836885 0.004479884 neural ## Hi_GW21.2_7 0.005662238 0.005258079 0.997990793 0.005489924 neural ## Hi_GW21.2_8 0.006673583 0.005372156 0.997970878 0.006093073 neural ## Hi_GW21.2_10 0.006068319 0.004924545 0.999025184 0.006455496 neural ## Hi_GW21.2_13 0.006570247 0.005539993 0.996820409 0.006655171 neural ## Hi_GW21.2_14 0.034265395 0.009301694 0.967446664 0.006468931 neural ## Hi_GW21_3 0.006201172 0.003752761 0.999039952 0.004831436 neural ## Hi_GW21_5 0.009457685 0.014074185 0.995820229 0.003917056 neural ## Hi_NPC_3 0.004149996 0.005522743 0.997155566 0.004851865 neural ## Hi_NPC_10 0.004303458 0.004823066 0.996592823 0.004371151 neural ## Hi_NPC_13 0.004890704 0.005139352 0.984736796 0.006192511 neural ## Hi_GW16_1 0.008469385 0.006149638 0.996226761 0.004744923 neural ## Hi_GW16_2 0.011811376 0.006893282 0.992064347 0.004293743 neural ## Hi_GW16_8 0.006844014 0.004769146 0.986799813 0.005588052 neural ## Hi_GW16_9 0.008829461 0.008264305 0.993223714 0.004011645 neural ## Hi_GW16_20 0.004986853 0.004648923 0.999480300 0.003178361 neural ## Hi_GW16_23 0.022552112 0.005048620 0.997510411 0.004086562 neural ## Hi_GW16_24 0.007571600 0.003693667 0.998725159 0.004298216 neural ## Hi_GW16_26 0.007918428 0.007452061 0.994968266 0.004012722 neural We can obtain a contingency table showing the prediction results versus the true cell type labels. First, we assign the metadata containing the true cell types to the predMeta slot\nscp@predMeta \u0026lt;- test_info Then, we can use the crossTab() function to obtain the contingency table. The true parameter indicates the column in predMeta that contains the true labels.\ncrossTab(scp, true = \u0026quot;cell_type2\u0026quot;) ## blood dermal neural pluripotent ## blood 1 0.00 0 0 ## dermal 0 0.97 0 0 ## neural 0 0.00 1 0 ## pluripotent 0 0.00 0 1 ## unassigned 0 0.03 0 0 The rows correspond to the prediction labels provided by scPred and the columns to the true column in @predMeta By default crossTab returns the proportion of cells classified for each possible group. Set prop = FALSE to get the cell counts instead of proportions.\ncrossTab(scp, true = \u0026quot;cell_type2\u0026quot;, prop = FALSE) ## blood dermal neural pluripotent ## blood 33 0 0 0 ## dermal 0 28 0 0 ## neural 0 0 19 0 ## pluripotent 0 0 0 7 ## unassigned 0 1 0 0 We can plot the probabilities using the plotPredProbs\nplotPredProbs(scp) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. In the previous plot, each panel represents the predictions each cell type across the different models. Each distribution and its colors represent the cell type evaluated by each prediction model in @train. We can observe that all blood, neural and pluripotent cells were correctly classified using a threshold of 0.9. Only one dermal cell was labeled as unassigned as it was below the threshold. This cell has a probability of 0.75 of being dermal.\n Reproducibility options(width = 90) devtools::session_info(include_base = TRUE) ## ─ Session info ───────────────────────────────────────────────────────────────────────── ## setting value ## version R version 3.5.3 Patched (2019-03-11 r77192) ## os macOS Mojave 10.14.6 ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz America/Mexico_City ## date 2020-01-10 ## ## ─ Packages ───────────────────────────────────────────────────────────────────────────── ## ! package * version date lib ## assertthat 0.2.1 2019-03-21 [1] ## backports 1.1.5 2019-10-02 [1] ## base * 3.5.3 2019-12-12 [?] ## Biobase * 2.42.0 2018-10-30 [1] ## BiocGenerics * 0.28.0 2018-10-30 [1] ## BiocParallel * 1.16.6 2019-02-17 [1] ## bitops 1.0-6 2013-08-17 [1] ## blogdown 0.17 2019-11-13 [1] ## bookdown 0.16 2019-11-22 [1] ## broom 0.5.3 2019-12-14 [1] ## callr 3.4.0 2019-12-09 [1] ## caret * 6.0-85 2020-01-07 [1] ## cellranger 1.1.0 2016-07-27 [1] ## class 7.3-15 2019-01-01 [1] ## cli 2.0.1 2020-01-08 [1] ## codetools 0.2-16 2018-12-24 [1] ## colorspace 1.4-1 2019-03-18 [1] ## P compiler 3.5.3 2019-12-12 [1] ## cowplot 1.0.0 2019-07-11 [1] ## crayon 1.3.4 2017-09-16 [1] ## data.table 1.12.8 2019-12-09 [1] ## P datasets * 3.5.3 2019-12-12 [1] ## DBI 1.1.0 2019-12-15 [1] ## dbplyr 1.4.2 2019-06-17 [1] ## DelayedArray * 0.8.0 2018-10-30 [1] ## desc 1.2.0 2018-05-01 [1] ## devtools 2.2.1 2019-09-24 [1] ## digest 0.6.23 2019-11-23 [1] ## dplyr * 0.8.3 2019-07-04 [1] ## ellipsis 0.3.0 2019-09-20 [1] ## evaluate 0.14 2019-05-28 [1] ## fansi 0.4.1 2020-01-08 [1] ## farver 2.0.1 2019-11-13 [1] ## forcats * 0.4.0 2019-02-17 [1] ## foreach 1.4.7 2019-07-27 [1] ## fs 1.3.1 2019-05-06 [1] ## generics 0.0.2 2018-11-29 [1] ## GenomeInfoDb * 1.18.2 2019-02-12 [1] ## GenomeInfoDbData 1.2.0 2020-01-10 [1] ## GenomicRanges * 1.34.0 2018-10-30 [1] ## ggplot2 * 3.2.1 2019-08-10 [1] ## glue 1.3.1 2019-03-12 [1] ## gower 0.2.1 2019-05-14 [1] ## P graphics * 3.5.3 2019-12-12 [1] ## P grDevices * 3.5.3 2019-12-12 [1] ## P grid 3.5.3 2019-12-12 [1] ## gtable 0.3.0 2019-03-25 [1] ## haven 2.2.0 2019-11-08 [1] ## hms 0.5.3 2020-01-08 [1] ## htmltools 0.4.0 2019-10-04 [1] ## httr 1.4.1 2019-08-05 [1] ## ipred 0.9-9 2019-04-28 [1] ## IRanges * 2.16.0 2018-10-30 [1] ## irlba * 2.3.3 2019-02-05 [1] ## iterators 1.0.12 2019-07-26 [1] ## jsonlite 1.6 2018-12-07 [1] ## kernlab * 0.9-29 2019-11-12 [1] ## knitr 1.26 2019-11-12 [1] ## labeling 0.3 2014-08-23 [1] ## lattice * 0.20-38 2018-11-04 [1] ## lava 1.6.6 2019-08-01 [1] ## lazyeval 0.2.2 2019-03-15 [1] ## lifecycle 0.1.0 2019-08-01 [1] ## lubridate 1.7.4 2018-04-11 [1] ## magrittr 1.5 2014-11-22 [1] ## MASS 7.3-51.1 2018-11-01 [1] ## Matrix * 1.2-15 2018-11-01 [1] ## matrixStats * 0.55.0 2019-09-07 [1] ## memoise 1.1.0 2017-04-21 [1] ## P methods * 3.5.3 2019-12-12 [1] ## MLmetrics * 1.1.1 2016-05-13 [1] ## ModelMetrics 1.2.2 2018-11-03 [1] ## modelr 0.1.5 2019-08-08 [1] ## munsell 0.5.0 2018-06-12 [1] ## nlme 3.1-137 2018-04-07 [1] ## nnet 7.3-12 2016-02-02 [1] ## P parallel * 3.5.3 2019-12-12 [1] ## pbapply 1.4-2 2019-08-31 [1] ## pillar 1.4.3 2019-12-20 [1] ## pkgbuild 1.0.6 2019-10-09 [1] ## pkgconfig 2.0.3 2019-09-22 [1] ## pkgload 1.0.2 2018-10-29 [1] ## plyr 1.8.5 2019-12-10 [1] ## prettyunits 1.1.0 2020-01-09 [1] ## pROC 1.15.3 2019-07-21 [1] ## processx 3.4.1 2019-07-18 [1] ## prodlim 2019.11.13 2019-11-17 [1] ## ps 1.3.0 2018-12-21 [1] ## purrr * 0.3.3 2019-10-18 [1] ## R6 2.4.1 2019-11-12 [1] ## RColorBrewer 1.1-2 2014-12-07 [1] ## Rcpp 1.0.3 2019-11-08 [1] ## RCurl 1.95-4.12 2019-03-04 [1] ## readr * 1.3.1 2018-12-21 [1] ## readxl 1.3.1 2019-03-13 [1] ## recipes 0.1.9 2020-01-07 [1] ## remotes 2.1.0 2019-06-24 [1] ## reprex 0.3.0 2019-05-16 [1] ## reshape2 1.4.3 2017-12-11 [1] ## rlang 0.4.2 2019-11-23 [1] ## rmarkdown 2.0 2019-12-12 [1] ## rpart 4.1-13 2018-02-23 [1] ## rprojroot 1.3-2 2018-01-03 [1] ## rstudioapi 0.10 2019-03-19 [1] ## rvest 0.3.5 2019-11-08 [1] ## S4Vectors * 0.20.1 2018-11-09 [1] ## scales 1.1.0 2019-11-18 [1] ## scPred * 0.0.0.9000 2020-01-10 [1] ## sessioninfo 1.1.1 2018-11-05 [1] ## SingleCellExperiment * 1.4.1 2019-01-04 [1] ## P splines 3.5.3 2019-12-12 [1] ## P stats * 3.5.3 2019-12-12 [1] ## P stats4 * 3.5.3 2019-12-12 [1] ## stringi 1.4.4 2020-01-09 [1] ## stringr * 1.4.0 2019-02-10 [1] ## SummarizedExperiment * 1.12.0 2018-10-30 [1] ## survival 2.43-3 2018-11-26 [1] ## testthat 2.3.1 2019-12-01 [1] ## tibble * 2.1.3 2019-06-06 [1] ## tidyr * 1.0.0 2019-09-11 [1] ## tidyselect 0.2.5 2018-10-11 [1] ## tidyverse * 1.3.0 2019-11-21 [1] ## timeDate 3043.102 2018-02-21 [1] ## P tools 3.5.3 2019-12-12 [1] ## usethis 1.5.1 2019-07-04 [1] ## P utils * 3.5.3 2019-12-12 [1] ## vctrs 0.2.1 2019-12-17 [1] ## withr 2.1.2 2018-03-15 [1] ## xfun 0.11 2019-11-12 [1] ## xml2 1.2.2 2019-08-09 [1] ## XVector 0.22.0 2018-10-30 [1] ## yaml 2.2.0 2018-07-25 [1] ## zeallot 0.1.0 2018-01-28 [1] ## zlibbioc 1.28.0 2018-10-30 [1] ## source ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## local ## Bioconductor ## Bioconductor ## Bioconductor ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.3) ## CRAN (R 3.5.3) ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## local ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## local ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## Bioconductor ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## Bioconductor ## Bioconductor ## Bioconductor ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## local ## local ## local ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## Bioconductor ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.0) ## CRAN (R 3.5.3) ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## local ## CRAN (R 3.5.0) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.3) ## CRAN (R 3.5.3) ## local ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.3) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## Bioconductor ## CRAN (R 3.5.2) ## Github (powellgenomicslab/scPred@b7f23ed) ## CRAN (R 3.5.0) ## Bioconductor ## local ## local ## local ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## Bioconductor ## CRAN (R 3.5.3) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## local ## CRAN (R 3.5.2) ## local ## CRAN (R 3.5.2) ## CRAN (R 3.5.0) ## CRAN (R 3.5.2) ## CRAN (R 3.5.2) ## Bioconductor ## CRAN (R 3.5.0) ## CRAN (R 3.5.0) ## Bioconductor ## ## [1] /Library/Frameworks/R.framework/Versions/3.5/Versions/3.5/Resources/library ## ## P ── Loaded and on-disk path mismatch.  ","date":1578614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578614400,"objectID":"4aeb4e632a77fbd2f1291c06dd0fc30e","permalink":"/post/introduction-to-scpred/","publishdate":"2020-01-10T00:00:00Z","relpermalink":"/post/introduction-to-scpred/","section":"post","summary":"Summary scPred is a general method to predict cell types based on variance structure decomposition. It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.\nFor more details see our paper in Genome Biology:","tags":[],"title":"Introduction to scPred","type":"post"},{"authors":["**Jose Alquicira Hernandez**","Anuja Sathe","Hanlee P. Ji","Quan Nguyen","Joseph Powell"],"categories":null,"content":"","date":1576130400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576130400,"objectID":"4563e50ee58f03b025006f3bacbd2e26","permalink":"/publication/scpred/","publishdate":"2019-12-12T00:00:00-06:00","relpermalink":"/publication/scpred/","section":"publication","summary":"Single-cell RNA sequencing has enabled the characterization of highly specific cell types in many tissues, as well as both primary and stem cell-derived cell lines. An important facet of these studies is the ability to identify the transcriptional signatures that define a cell type or state. In theory, this information can be used to classify an individual cell based on its transcriptional profile. Here, we present scPred, a new generalizable method that is able to provide highly accurate classification of single cells, using a combination of unbiased feature selection from a reduced-dimension space, and machine-learning probability-based prediction method. We apply scPred to scRNA-seq data from pancreatic tissue, mononuclear cells, colorectal tumor biopsies, and circulating dendritic cells and show that scPred is able to classify individual cells with high accuracy. The generalized method is available at https://github.com/powellgenomicslab/scPred","tags":[],"title":"scPred: Cell type prediction at single cell resolution","type":"publication"},{"authors":null,"categories":[],"content":" In this tutorial, I’ll show how to incorporate prediction analyses using Seurat along with scPred.\nFirst, we’ll load scPred and the tidyverse:\nlibrary(scPred) library(tidyverse) Let’s load Seurat:\nlibrary(Seurat) We’ll work with a dataset obtained to analyze the ventral midbrain development in human (see Molecular Diversity of Midbrain Development in Mouse, Human, and Stem Cells). The data will be downloaded from Hemberg’s lab:\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/manno_human.rds\u0026quot;, destfile = \u0026quot;~/Downloads/manno_human.rds\u0026quot;) Then we import the data and convert the scater object into Seurat\nmidbrain \u0026lt;- readRDS(\u0026quot;~/Downloads/manno_human.rds\u0026quot;) midbrain \u0026lt;- Convert(from = midbrain, to = \u0026quot;seurat\u0026quot;) To show the training and prediction steps we’ll split the data into two partitions. First, we generate random indices to select 75% of the total number of cells for training:\nn \u0026lt;- length(midbrain@cell.names) set.seed(66) i \u0026lt;- sample(seq_len(n), size = n * 0.75) Using this indices, we can subset the Seurat object to create two objects containing the training and test data.\ntrainData \u0026lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[i]) testData \u0026lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[-i]) We normalize and scale the data using Seurat. The most variable genes are also identified in order to perform dimensionality reduction.\ntrainData %\u0026gt;% NormalizeData(normalization.method = \u0026quot;LogNormalize\u0026quot;, scale.factor = 10000) %\u0026gt;% FindVariableGenes(mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, do.plot = FALSE) %\u0026gt;% ScaleData() -\u0026gt; trainData ## Scaling data matrix Principal component analysis scPred finds a set of discriminative principal components as features to perform the predictions. Using Seurat, we’ll perform a PCA and visualize the results.\ntrainData \u0026lt;- RunPCA(trainData, do.print = FALSE) For this tutorial we’ll focus on predicting the source of the dopaminergic neurons (ESCs - embryonic stem cells, iPSCs - induced pluripotent stem cells, and ventral midbrain cells)\nPCAPlot(trainData, group = \u0026quot;Source\u0026quot;)  Get feature space The function getFeatureSpace() from scPred can handle Seurat objects as input. The Seurat object must contain a principal component analysis computed already. Here, we provide the trainData object and specify the variable in the metadata slot containing the cell class of interest (e.g. Source).\nscpred \u0026lt;- getFeatureSpace(trainData, pVar = \u0026quot;Source\u0026quot;) ## Not all the classes are valid R variable names ## The following classes are renamed: ## ventral midbrain ## ## See new classes in \u0026#39;Source.valid\u0026#39; column in metadata: ## ventral.midbrain ## ## DONE! Once we obtain the feature space, the output of the getFeatureSpace() function is a scPred object which contains the normalized expression data, the principal component analysis and the metadata.\n Model training Now we’ll train a support vector machine with a radial kernel using scPred using the trainData function.\nscpred \u0026lt;- trainModel(scpred)  Prediction The scPredict() function can also handle Seurat objects containing the gene expression data of the cells to be predicted. This functions returns a dataframe stored in the @predictions slot with the class probabilities and the predicted class for each cell in the test dataset.\nscpred \u0026lt;- scPredict(scpred, newData = testData) ## Scaling data matrix ## Predicting cell types We can get the predictions using the getPredictions() function:\ngetPredictions(scpred) %\u0026gt;% head(n = 10) ## ventral.midbrain ESCs iPSCs predClass ## 1772122_302_C04 6.017780e-04 0.02568502 0.6178537020 unassigned ## 1772122_302_D11 1.331316e-02 0.52307041 0.0070626037 unassigned ## 1772122_180_A06 6.288517e-04 0.99779341 0.0007134394 ESCs ## 1772122_300_E06 1.833807e-05 0.99998932 0.0001600490 ESCs ## 1772122_300_F10 1.020733e-05 0.99995711 0.0001408679 ESCs ## 1772122_301_C12 2.308561e-03 0.98552436 0.0027696475 ESCs ## 1772122_299_H11 1.973662e-06 0.99998539 0.0002169245 ESCs ## 1772122_301_A02 3.782298e-03 0.99011928 0.0019142387 ESCs ## 1772122_300_D02 1.849093e-05 0.99996094 0.0001692000 ESCs ## 1772122_302_A08 4.622436e-05 0.96686430 0.2695268815 ESCs In order to get the accuracy of scPred, well add the test metadata to the @predMeta slot. The number of rows in the metadata must match the number of cells that were predicted.\nscpred@predMeta \u0026lt;- testData@meta.data Once we have the test metadata stored in the scPred object, we can use the crossTab function to get a contingency table showing the predictions versus the true cell classes. In this case, the column Source of the test metadata contains the true cell labels:\n We reorder the rows of the contingency table to match the true cell categories\n crossTab(scpred, \u0026quot;Source\u0026quot;)[c(1,2,4,3),] ## ESCs iPSCs ventral midbrain ## ESCs 0.97 0.03 0 ## iPSCs 0.00 0.97 0 ## ventral.midbrain 0.00 0.00 1 ## unassigned 0.03 0.00 0 Along the diagonal we can see the sensitivity of scPred per class. We can get the same table with counts too:\ncrossTab(scpred, \u0026quot;Source\u0026quot;, prop = FALSE)[c(1,2,4,3),] ## ESCs iPSCs ventral midbrain ## ESCs 422 3 0 ## iPSCs 0 83 0 ## ventral.midbrain 0 0 485 ## unassigned 15 0 0  Session info options(width = 70) devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────── ## setting value ## version R version 3.5.1 (2018-07-02) ## os macOS High Sierra 10.13.6 ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz Australia/Sydney ## date 2019-01-16 ## ## ─ Packages ───────────────────────────────────────────────────────── ## package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.5.0) ## acepack 1.4.1 2016-10-29 [1] CRAN (R 3.5.0) ## ape 5.2 2018-09-24 [1] CRAN (R 3.5.0) ## assertthat 0.2.0 2017-04-11 [1] CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 [1] CRAN (R 3.5.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 3.5.0) ## bibtex 0.4.2 2017-06-30 [1] CRAN (R 3.5.0) ## bindr 0.1.1 2018-03-13 [1] CRAN (R 3.5.0) ## bindrcpp * 0.2.2 2018-03-29 [1] CRAN (R 3.5.0) ## Biobase * 2.42.0 2018-10-30 [1] Bioconductor ## BiocGenerics * 0.28.0 2018-10-30 [1] Bioconductor ## BiocParallel * 1.16.0 2018-10-30 [1] Bioconductor ## bit 1.1-14 2018-05-29 [1] CRAN (R 3.5.0) ## bit64 0.9-7 2017-05-08 [1] CRAN (R 3.5.0) ## bitops 1.0-6 2013-08-17 [1] CRAN (R 3.5.0) ## blogdown 0.9 2018-10-23 [1] CRAN (R 3.5.0) ## bookdown 0.8 2018-12-03 [1] CRAN (R 3.5.0) ## broom 0.5.0 2018-07-17 [1] CRAN (R 3.5.0) ## callr 3.0.0 2018-08-24 [1] CRAN (R 3.5.0) ## caret * 6.0-80 2018-05-26 [1] CRAN (R 3.5.0) ## caTools 1.17.1.1 2018-07-20 [1] CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.5.0) ## checkmate 1.8.5 2017-10-24 [1] CRAN (R 3.5.0) ## class 7.3-14 2015-08-30 [1] CRAN (R 3.5.1) ## cli 1.0.1 2018-09-25 [1] CRAN (R 3.5.0) ## cluster 2.0.7-1 2018-04-13 [1] CRAN (R 3.5.0) ## codetools 0.2-15 2016-10-05 [1] CRAN (R 3.5.1) ## colorspace 1.3-2 2016-12-14 [1] CRAN (R 3.5.0) ## cowplot * 0.9.3 2018-07-15 [1] CRAN (R 3.5.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 3.5.0) ## CVST 0.2-2 2018-05-26 [1] CRAN (R 3.5.0) ## data.table 1.11.8 2018-09-30 [1] CRAN (R 3.5.0) ## ddalpha 1.3.4 2018-06-23 [1] CRAN (R 3.5.0) ## DelayedArray * 0.8.0 2018-10-30 [1] Bioconductor ## DEoptimR 1.0-8 2016-11-19 [1] CRAN (R 3.5.0) ## desc 1.2.0 2018-05-01 [1] CRAN (R 3.5.0) ## devtools 2.0.1 2018-10-26 [1] CRAN (R 3.5.1) ## digest 0.6.18 2018-10-10 [1] CRAN (R 3.5.0) ## dimRed 0.1.0 2017-05-04 [1] CRAN (R 3.5.0) ## diptest 0.75-7 2016-12-05 [1] CRAN (R 3.5.0) ## doSNOW 1.0.16 2017-12-13 [1] CRAN (R 3.5.0) ## dplyr * 0.7.8 2018-11-10 [1] CRAN (R 3.5.0) ## DRR 0.0.3 2018-01-06 [1] CRAN (R 3.5.0) ## dtw 1.20-1 2018-05-18 [1] CRAN (R 3.5.0) ## evaluate 0.12 2018-10-09 [1] CRAN (R 3.5.0) ## fitdistrplus 1.0-11 2018-09-10 [1] CRAN (R 3.5.0) ## flexmix 2.3-14 2017-04-28 [1] CRAN (R 3.5.0) ## forcats * 0.3.0 2018-02-19 [1] CRAN (R 3.5.0) ## foreach 1.4.4 2017-12-12 [1] CRAN (R 3.5.0) ## foreign 0.8-71 2018-07-20 [1] CRAN (R 3.5.0) ## Formula 1.2-3 2018-05-03 [1] CRAN (R 3.5.0) ## fpc 2.1-11.1 2018-07-20 [1] CRAN (R 3.5.0) ## fs 1.2.6 2018-08-23 [1] CRAN (R 3.5.0) ## gbRd 0.4-11 2012-10-01 [1] CRAN (R 3.5.0) ## gdata 2.18.0 2017-06-06 [1] CRAN (R 3.5.0) ## GenomeInfoDb * 1.18.1 2018-11-12 [1] Bioconductor ## GenomeInfoDbData 1.2.0 2018-11-07 [1] Bioconductor ## GenomicRanges * 1.34.0 2018-10-30 [1] Bioconductor ## geometry 0.3-6 2015-09-09 [1] CRAN (R 3.5.0) ## ggplot2 * 3.1.0 2018-10-25 [1] CRAN (R 3.5.0) ## ggridges 0.5.1 2018-09-27 [1] CRAN (R 3.5.0) ## glue 1.3.0 2018-07-17 [1] CRAN (R 3.5.0) ## gower 0.1.2 2017-02-23 [1] CRAN (R 3.5.0) ## gplots 3.0.1 2016-03-30 [1] CRAN (R 3.5.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 3.5.0) ## gtable 0.2.0 2016-02-26 [1] CRAN (R 3.5.0) ## gtools 3.8.1 2018-06-26 [1] CRAN (R 3.5.0) ## haven 1.1.2 2018-06-27 [1] CRAN (R 3.5.0) ## hdf5r 1.0.1 2018-10-07 [1] CRAN (R 3.5.0) ## Hmisc 4.1-1 2018-01-03 [1] CRAN (R 3.5.0) ## hms 0.4.2 2018-03-10 [1] CRAN (R 3.5.0) ## htmlTable 1.12 2018-05-26 [1] CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.5.0) ## htmlwidgets 1.3 2018-09-30 [1] CRAN (R 3.5.0) ## httr 1.3.1 2017-08-20 [1] CRAN (R 3.5.0) ## ica 1.0-2 2018-05-24 [1] CRAN (R 3.5.0) ## igraph 1.2.2 2018-07-27 [1] CRAN (R 3.5.0) ## ipred 0.9-8 2018-11-05 [1] CRAN (R 3.5.0) ## IRanges * 2.16.0 2018-10-30 [1] Bioconductor ## irlba * 2.3.2 2018-01-11 [1] CRAN (R 3.5.0) ## iterators 1.0.10 2018-07-13 [1] CRAN (R 3.5.0) ## jsonlite 1.5 2017-06-01 [1] CRAN (R 3.5.0) ## kernlab * 0.9-27 2018-08-10 [1] CRAN (R 3.5.0) ## KernSmooth 2.23-15 2015-06-29 [1] CRAN (R 3.5.1) ## knitr 1.20 2018-02-20 [1] CRAN (R 3.5.0) ## labeling 0.3 2014-08-23 [1] CRAN (R 3.5.0) ## lars 1.2 2013-04-24 [1] CRAN (R 3.5.0) ## lattice * 0.20-38 2018-11-04 [1] CRAN (R 3.5.0) ## latticeExtra 0.6-28 2016-02-09 [1] CRAN (R 3.5.0) ## lava 1.6.3 2018-08-10 [1] CRAN (R 3.5.0) ## lazyeval 0.2.1 2017-10-29 [1] CRAN (R 3.5.0) ## lmtest 0.9-36 2018-04-04 [1] CRAN (R 3.5.0) ## lsei 1.2-0 2017-10-23 [1] CRAN (R 3.5.0) ## lubridate 1.7.4 2018-04-11 [1] CRAN (R 3.5.0) ## magic 1.5-9 2018-09-17 [1] CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 [1] CRAN (R 3.5.0) ## MASS 7.3-51.1 2018-11-01 [1] CRAN (R 3.5.0) ## Matrix * 1.2-15 2018-11-01 [1] CRAN (R 3.5.0) ## matrixStats * 0.54.0 2018-07-23 [1] CRAN (R 3.5.0) ## mclust 5.4.2 2018-11-17 [1] CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 [1] CRAN (R 3.5.0) ## metap 1.0 2018-07-25 [1] CRAN (R 3.5.0) ## mixtools 1.1.0 2017-03-10 [1] CRAN (R 3.5.0) ## ModelMetrics 1.2.2 2018-11-03 [1] CRAN (R 3.5.0) ## modelr 0.1.2 2018-05-11 [1] CRAN (R 3.5.0) ## modeltools 0.2-22 2018-07-16 [1] CRAN (R 3.5.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 3.5.0) ## mvtnorm 1.0-8 2018-05-31 [1] CRAN (R 3.5.0) ## nlme 3.1-137 2018-04-07 [1] CRAN (R 3.5.1) ## nnet 7.3-12 2016-02-02 [1] CRAN (R 3.5.1) ## npsurv 0.4-0 2017-10-14 [1] CRAN (R 3.5.0) ## pbapply 1.3-4 2018-01-10 [1] CRAN (R 3.5.0) ## pillar 1.3.0 2018-07-14 [1] CRAN (R 3.5.0) ## pkgbuild 1.0.2 2018-10-16 [1] CRAN (R 3.5.1) ## pkgconfig 2.0.2 2018-08-16 [1] CRAN (R 3.5.0) ## pkgload 1.0.2 2018-10-29 [1] CRAN (R 3.5.0) ## pls 2.7-0 2018-08-21 [1] CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 [1] CRAN (R 3.5.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.5.0) ## prabclus 2.2-6 2015-01-14 [1] CRAN (R 3.5.0) ## prettyunits 1.0.2 2015-07-13 [1] CRAN (R 3.5.0) ## processx 3.2.0 2018-08-16 [1] CRAN (R 3.5.0) ## prodlim 2018.04.18 2018-04-18 [1] CRAN (R 3.5.0) ## proxy 0.4-22 2018-04-08 [1] CRAN (R 3.5.0) ## ps 1.2.1 2018-11-06 [1] CRAN (R 3.5.0) ## purrr * 0.2.5 2018-05-29 [1] CRAN (R 3.5.0) ## R.methodsS3 1.7.1 2016-02-16 [1] CRAN (R 3.5.0) ## R.oo 1.22.0 2018-04-22 [1] CRAN (R 3.5.0) ## R.utils 2.7.0 2018-08-27 [1] CRAN (R 3.5.0) ## R6 2.3.0 2018-10-04 [1] CRAN (R 3.5.0) ## RANN 2.6 2018-07-16 [1] CRAN (R 3.5.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 3.5.0) ## Rcpp 1.0.0 2018-11-07 [1] CRAN (R 3.5.0) ## RcppRoll 0.3.0 2018-06-05 [1] CRAN (R 3.5.0) ## RCurl 1.95-4.11 2018-07-15 [1] CRAN (R 3.5.0) ## Rdpack 0.10-1 2018-10-04 [1] CRAN (R 3.5.0) ## readr * 1.1.1 2017-05-16 [1] CRAN (R 3.5.0) ## readxl 1.1.0 2018-04-20 [1] CRAN (R 3.5.0) ## recipes 0.1.3 2018-06-16 [1] CRAN (R 3.5.0) ## remotes 2.0.2 2018-10-30 [1] CRAN (R 3.5.1) ## reshape2 1.4.3 2017-12-11 [1] CRAN (R 3.5.0) ## reticulate 1.10 2018-08-05 [1] CRAN (R 3.5.0) ## rlang 0.3.0.1 2018-10-25 [1] CRAN (R 3.5.0) ## rmarkdown 1.10 2018-06-11 [1] CRAN (R 3.5.0) ## robustbase 0.93-3 2018-09-21 [1] CRAN (R 3.5.0) ## ROCR 1.0-7 2015-03-26 [1] CRAN (R 3.5.0) ## rpart 4.1-13 2018-02-23 [1] CRAN (R 3.5.1) ## rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.5.0) ## rstudioapi 0.8 2018-10-02 [1] CRAN (R 3.5.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.5.0) ## rvest 0.3.2 2016-06-17 [1] CRAN (R 3.5.0) ## S4Vectors * 0.20.1 2018-11-09 [1] Bioconductor ## scales 1.0.0 2018-08-09 [1] CRAN (R 3.5.0) ## scPred * 0.0.0.9000 2018-12-06 [1] local ## SDMTools 1.1-221 2014-08-05 [1] CRAN (R 3.5.0) ## segmented 0.5-3.0 2017-11-30 [1] CRAN (R 3.5.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.5.0) ## Seurat * 2.3.4 2018-07-17 [1] CRAN (R 3.5.0) ## sfsmisc 1.1-2 2018-03-05 [1] CRAN (R 3.5.0) ## SingleCellExperiment * 1.4.0 2018-10-30 [1] Bioconductor ## snow 0.4-3 2018-09-14 [1] CRAN (R 3.5.0) ## stringi 1.2.4 2018-07-20 [1] CRAN (R 3.5.0) ## stringr * 1.3.1 2018-05-10 [1] CRAN (R 3.5.0) ## SummarizedExperiment * 1.12.0 2018-10-30 [1] Bioconductor ## survival 2.43-1 2018-10-29 [1] CRAN (R 3.5.0) ## tibble * 1.4.2 2018-01-22 [1] CRAN (R 3.5.0) ## tidyr * 0.8.2 2018-10-28 [1] CRAN (R 3.5.0) ## tidyselect 0.2.5 2018-10-11 [1] CRAN (R 3.5.0) ## tidyverse * 1.2.1 2017-11-14 [1] CRAN (R 3.5.0) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 3.5.0) ## trimcluster 0.1-2.1 2018-07-20 [1] CRAN (R 3.5.0) ## tsne 0.1-3 2016-07-15 [1] CRAN (R 3.5.0) ## usethis 1.4.0 2018-08-14 [1] CRAN (R 3.5.0) ## withr 2.1.2 2018-03-15 [1] CRAN (R 3.5.0) ## xfun 0.4 2018-10-23 [1] CRAN (R 3.5.0) ## xml2 1.2.0 2018-01-24 [1] CRAN (R 3.5.0) ## XVector 0.22.0 2018-10-30 [1] Bioconductor ## yaml 2.2.0 2018-07-25 [1] CRAN (R 3.5.0) ## zlibbioc 1.28.0 2018-10-30 [1] Bioconductor ## zoo 1.8-4 2018-09-19 [1] CRAN (R 3.5.0) ## ## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library  ","date":1547596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547596800,"objectID":"f88372ed1a0cd3cbf80bfe72fd05494c","permalink":"/post/scpred-integration-with-seurat/","publishdate":"2019-01-16T00:00:00Z","relpermalink":"/post/scpred-integration-with-seurat/","section":"post","summary":"In this tutorial, I’ll show how to incorporate prediction analyses using Seurat along with scPred.\nFirst, we’ll load scPred and the tidyverse:\nlibrary(scPred) library(tidyverse) Let’s load Seurat:\nlibrary(Seurat) We’ll work with a dataset obtained to analyze the ventral midbrain development in human (see Molecular Diversity of Midbrain Development in Mouse, Human, and Stem Cells). The data will be downloaded from Hemberg’s lab:\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/manno_human.rds\u0026quot;, destfile = \u0026quot;~/Downloads/manno_human.rds\u0026quot;) Then we import the data and convert the scater object into Seurat","tags":[],"title":"scPred integration with Seurat","type":"post"},{"authors":["Anne Senabouth","Sam Lukowski","**Jose Alquicira Hernandez**","Stacey Andersen","Xin Mei","Quan Nguyen","Joseph Powell"],"categories":null,"content":"","date":1535778000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535778000,"objectID":"baf7fac5dc91c8a35f6c38188a1874cc","permalink":"/publication/ascend/","publishdate":"2018-09-01T00:00:00-05:00","relpermalink":"/publication/ascend/","section":"publication","summary":"Background: Recent developments in single-cell RNA sequencing (scRNA-seq) platforms have vastly increased the number of cells typically assayed in an experiment. Analysis of scRNA-seq data is multidisciplinary in nature, requiring careful consideration of the application of statistical methods with respect to the underlying biology. Few analysis packages exist that are at once robust, are computationally fast, and allow flexible integration with other bioinformatics tools and methods.Findings: ascend is an R package comprising tools designed to simplify and streamline the preliminary analysis of scRNA-seq data, while addressing the statistical challenges of scRNA-seq analysis and enabling flexible integration with genomics packages and native R functions, including fast parallel computation and efficient memory management. The package incorporates both novel and established methods to provide a framework to perform cell and gene filtering, quality control, normalization, dimension reduction, clustering, differential expression, and a wide range of visualization functions.Conclusions: ascend is designed to work with scRNA-seq data generated by any high-throughput platform and includes functions to convert data objects between software packages. The ascend workflow is simple and interactive, as well as suitable for implementation by a broad range of users, including those with little programming experience.","tags":[],"title":"ascend: R package for analysis of single cell RNA-seq data","type":"publication"},{"authors":["José Alquicira Hernández"],"categories":null,"content":"Click on the **Slides** button above to view the built-in slides feature.  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1500181200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1500181200,"objectID":"b8fcca248adea81a963cab2b4197d2c6","permalink":"/talk/single_cell_oz_2018/","publishdate":"2017-07-16T00:00:00-05:00","relpermalink":"/talk/single_cell_oz_2018/","section":"talk","summary":"Click on the **Slides** button above to view the built-in slides feature.  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.","tags":[],"title":"scPred: cell type prediction at single cell resolution","type":"talk"},{"authors":["Abhinav Nellore","Andrew E Jaffe","Jean-Philippe Fortin","**José Alquicira-Hernández**","Leonardo Collado-Torres","Siruo Wang","Robert A Phillips III","Nishika Karbhari","Kasper D Hansen","Ben Langmead","Jeffrey T Leek"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1480572000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480572000,"objectID":"4adb581873886d6973677b02423d6bbf","permalink":"/publication/human_splicing_diversity/","publishdate":"2016-12-01T00:00:00-06:00","relpermalink":"/publication/human_splicing_diversity/","section":"publication","summary":"We aligned 21,504 Illumina-sequenced human RNA-seq samples from the Sequence Read Archive (SRA) to the human genome and compared detected exon-exon junctions with junctions in several recent gene annotations. We found 56,861 junctions (18.6%) in at least 1000 samples that were not annotated, and their expression associated with tissue type. Junctions well expressed in individual samples tended to be annotated. Newer samples contributed few novel well-supported junctions, with the vast majority of detected junctions present in samples before 2013. We compiled junction data into a resource called intropolis available at http://intropolis.rail.bio. We used this resource to search for a recently validated isoform of the ALK gene and characterized the potential functional implications of unannotated junctions with publicly available TRAP-seq data","tags":[],"title":"Human splicing diversity and the extent of unannotated splice junctions across human RNA-seq samples on the Sequence Read Archive","type":"publication"},{"authors":["Abhinav Nellore","Leonardo Collado-Torres","Andrew E Jaffe","**José Alquicira-Hernández**","Christopher Wilks","Jacob Pritt","James Morton","Jeffrey T Leek","Ben Langmead"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1472706000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472706000,"objectID":"a5144f204bcbbfba0ec2badbb1af7356","permalink":"/publication/rail/","publishdate":"2016-09-01T00:00:00-05:00","relpermalink":"/publication/rail/","section":"publication","summary":"We describe Rail-RNA, a cloud-enabled spliced aligner that analyzes many samples at once. Rail-RNA eliminates redundant work across samples, making it more efficient as samples are added. For many samples, Rail-RNA is more accurate than annotation-assisted aligners. We use Rail-RNA to align 667 RNA-seq samples from the GEUVADIS project on Amazon Web Services in under 16h for US$0.91 per sample. Rail-RNA outputs alignments in SAM/BAM format; but it also outputs (i) base-level coverage bigWigs for each sample; (ii) coverage bigWigs encoding normalized mean and median coverages at each base across samples analyzed; and (iii) exon–exon splice junctions and indels (features) in columnar formats that juxtapose coverages in samples in which a given feature is found. Supplementary outputs are ready for use with downstream packages for reproducible statistical analysis. We use Rail-RNA to identify expressed regions in the GEUVADIS samples and show that both annotated and unannotated (novel) expressed regions exhibit consistent patterns of variation across populations and with respect to known confounding variables.","tags":[],"title":"Rail-RNA: scalable analysis of RNA-seq splicing and coverage","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]