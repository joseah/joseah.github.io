[{"authors":null,"categories":[],"content":" In this tutorial, I’ll show how to incorporate prediction analyses using Seurat along with scPred.\nFirst, we’ll load scPred and the tidyverse:\nlibrary(scPred) library(tidyverse) Let’s load Seurat:\nlibrary(Seurat) We’ll work with a dataset obtained to analyze the ventral midbrain development in human (see Molecular Diversity of Midbrain Development in Mouse, Human, and Stem Cells). The data will be downloaded from Hemberg’s lab:\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/manno_human.rds\u0026quot;, destfile = \u0026quot;~/Downloads/manno_human.rds\u0026quot;) Then we import the data and convert the scater object into Seurat\nmidbrain \u0026lt;- readRDS(\u0026quot;~/Downloads/manno_human.rds\u0026quot;) midbrain \u0026lt;- Convert(from = midbrain, to = \u0026quot;seurat\u0026quot;) To show the training and prediction steps we’ll split the data into two partitions. First, we generate random indices to select 75% of the total number of cells for training:\nn \u0026lt;- length(midbrain@cell.names) set.seed(66) i \u0026lt;- sample(seq_len(n), size = n * 0.75) Using this indices, we can subset the Seurat object to create two objects containing the training and test data.\ntrainData \u0026lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[i]) testData \u0026lt;- SubsetData(midbrain, cells.use = midbrain@cell.names[-i]) We normalize and scale the data using Seurat. The most variable genes are also identified in order to perform dimensionality reduction.\ntrainData %\u0026gt;% NormalizeData(normalization.method = \u0026quot;LogNormalize\u0026quot;, scale.factor = 10000) %\u0026gt;% FindVariableGenes(mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, do.plot = FALSE) %\u0026gt;% ScaleData() -\u0026gt; trainData ## Scaling data matrix Principal component analysis scPred finds a set of discriminative principal components as features to perform the predictions. Using Seurat, we’ll perform a PCA and visualize the results.\ntrainData \u0026lt;- RunPCA(trainData, do.print = FALSE) For this tutorial we’ll focus on predicting the source of the dopaminergic neurons (ESCs - embryonic stem cells, iPSCs - induced pluripotent stem cells, and ventral midbrain cells)\nPCAPlot(trainData, group = \u0026quot;Source\u0026quot;)  Get feature space The function getFeatureSpace() from scPred can handle Seurat objects as input. The Seurat object must contain a principal component analysis computed already. Here, we provide the trainData object and specify the variable in the metadata slot containing the cell class of interest (e.g. Source).\nscpred \u0026lt;- getFeatureSpace(trainData, pVar = \u0026quot;Source\u0026quot;) ## Not all the classes are valid R variable names ## The following classes are renamed: ## ventral midbrain ## ## See new classes in \u0026#39;Source.valid\u0026#39; column in metadata: ## ventral.midbrain ## ## DONE! Once we obtain the feature space, the output of the getFeatureSpace() function is a scPred object which contains the normalized expression data, the principal component analysis and the metadata.\n Model training Now we’ll train a support vector machine with a radial kernel using scPred using the trainData function.\nscpred \u0026lt;- trainModel(scpred)  Prediction The scPredict() function can also handle Seurat objects containing the gene expression data of the cells to be predicted. This functions returns a dataframe stored in the @predictions slot with the class probabilities and the predicted class for each cell in the test dataset.\nscpred \u0026lt;- scPredict(scpred, newData = testData) ## Scaling data matrix ## Predicting cell types We can get the predictions using the getPredictions() function:\ngetPredictions(scpred) %\u0026gt;% head(n = 10) ## ventral.midbrain ESCs iPSCs predClass ## 1772122_302_C04 6.017780e-04 0.02568502 0.6178537020 unassigned ## 1772122_302_D11 1.331316e-02 0.52307041 0.0070626037 unassigned ## 1772122_180_A06 6.288517e-04 0.99779341 0.0007134394 ESCs ## 1772122_300_E06 1.833807e-05 0.99998932 0.0001600490 ESCs ## 1772122_300_F10 1.020733e-05 0.99995711 0.0001408679 ESCs ## 1772122_301_C12 2.308561e-03 0.98552436 0.0027696475 ESCs ## 1772122_299_H11 1.973662e-06 0.99998539 0.0002169245 ESCs ## 1772122_301_A02 3.782298e-03 0.99011928 0.0019142387 ESCs ## 1772122_300_D02 1.849093e-05 0.99996094 0.0001692000 ESCs ## 1772122_302_A08 4.622436e-05 0.96686430 0.2695268815 ESCs In order to get the accuracy of scPred, well add the test metadata to the @predMeta slot. The number of rows in the metadata must match the number of cells that were predicted.\nscpred@predMeta \u0026lt;- testData@meta.data Once we have the test metadata stored in the scPred object, we can use the crossTab function to get a contingency table showing the predictions versus the true cell classes. In this case, the column Source of the test metadata contains the true cell labels:\n We reorder the rows of the contingency table to match the true cell categories\n crossTab(scpred, \u0026quot;Source\u0026quot;)[c(1,2,4,3),] ## ESCs iPSCs ventral midbrain ## ESCs 0.97 0.03 0 ## iPSCs 0.00 0.97 0 ## ventral.midbrain 0.00 0.00 1 ## unassigned 0.03 0.00 0 Along the diagonal we can see the sensitivity of scPred per class. We can get the same table with counts too:\ncrossTab(scpred, \u0026quot;Source\u0026quot;, prop = FALSE)[c(1,2,4,3),] ## ESCs iPSCs ventral midbrain ## ESCs 422 3 0 ## iPSCs 0 83 0 ## ventral.midbrain 0 0 485 ## unassigned 15 0 0  Session info options(width = 70) devtools::session_info() ## ─ Session info ───────────────────────────────────────────────────── ## setting value ## version R version 3.5.1 (2018-07-02) ## os macOS High Sierra 10.13.6 ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz Australia/Sydney ## date 2019-01-16 ## ## ─ Packages ───────────────────────────────────────────────────────── ## package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.5.0) ## acepack 1.4.1 2016-10-29 [1] CRAN (R 3.5.0) ## ape 5.2 2018-09-24 [1] CRAN (R 3.5.0) ## assertthat 0.2.0 2017-04-11 [1] CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 [1] CRAN (R 3.5.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 3.5.0) ## bibtex 0.4.2 2017-06-30 [1] CRAN (R 3.5.0) ## bindr 0.1.1 2018-03-13 [1] CRAN (R 3.5.0) ## bindrcpp * 0.2.2 2018-03-29 [1] CRAN (R 3.5.0) ## Biobase * 2.42.0 2018-10-30 [1] Bioconductor ## BiocGenerics * 0.28.0 2018-10-30 [1] Bioconductor ## BiocParallel * 1.16.0 2018-10-30 [1] Bioconductor ## bit 1.1-14 2018-05-29 [1] CRAN (R 3.5.0) ## bit64 0.9-7 2017-05-08 [1] CRAN (R 3.5.0) ## bitops 1.0-6 2013-08-17 [1] CRAN (R 3.5.0) ## blogdown 0.9 2018-10-23 [1] CRAN (R 3.5.0) ## bookdown 0.8 2018-12-03 [1] CRAN (R 3.5.0) ## broom 0.5.0 2018-07-17 [1] CRAN (R 3.5.0) ## callr 3.0.0 2018-08-24 [1] CRAN (R 3.5.0) ## caret * 6.0-80 2018-05-26 [1] CRAN (R 3.5.0) ## caTools 1.17.1.1 2018-07-20 [1] CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.5.0) ## checkmate 1.8.5 2017-10-24 [1] CRAN (R 3.5.0) ## class 7.3-14 2015-08-30 [1] CRAN (R 3.5.1) ## cli 1.0.1 2018-09-25 [1] CRAN (R 3.5.0) ## cluster 2.0.7-1 2018-04-13 [1] CRAN (R 3.5.0) ## codetools 0.2-15 2016-10-05 [1] CRAN (R 3.5.1) ## colorspace 1.3-2 2016-12-14 [1] CRAN (R 3.5.0) ## cowplot * 0.9.3 2018-07-15 [1] CRAN (R 3.5.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 3.5.0) ## CVST 0.2-2 2018-05-26 [1] CRAN (R 3.5.0) ## data.table 1.11.8 2018-09-30 [1] CRAN (R 3.5.0) ## ddalpha 1.3.4 2018-06-23 [1] CRAN (R 3.5.0) ## DelayedArray * 0.8.0 2018-10-30 [1] Bioconductor ## DEoptimR 1.0-8 2016-11-19 [1] CRAN (R 3.5.0) ## desc 1.2.0 2018-05-01 [1] CRAN (R 3.5.0) ## devtools 2.0.1 2018-10-26 [1] CRAN (R 3.5.1) ## digest 0.6.18 2018-10-10 [1] CRAN (R 3.5.0) ## dimRed 0.1.0 2017-05-04 [1] CRAN (R 3.5.0) ## diptest 0.75-7 2016-12-05 [1] CRAN (R 3.5.0) ## doSNOW 1.0.16 2017-12-13 [1] CRAN (R 3.5.0) ## dplyr * 0.7.8 2018-11-10 [1] CRAN (R 3.5.0) ## DRR 0.0.3 2018-01-06 [1] CRAN (R 3.5.0) ## dtw 1.20-1 2018-05-18 [1] CRAN (R 3.5.0) ## evaluate 0.12 2018-10-09 [1] CRAN (R 3.5.0) ## fitdistrplus 1.0-11 2018-09-10 [1] CRAN (R 3.5.0) ## flexmix 2.3-14 2017-04-28 [1] CRAN (R 3.5.0) ## forcats * 0.3.0 2018-02-19 [1] CRAN (R 3.5.0) ## foreach 1.4.4 2017-12-12 [1] CRAN (R 3.5.0) ## foreign 0.8-71 2018-07-20 [1] CRAN (R 3.5.0) ## Formula 1.2-3 2018-05-03 [1] CRAN (R 3.5.0) ## fpc 2.1-11.1 2018-07-20 [1] CRAN (R 3.5.0) ## fs 1.2.6 2018-08-23 [1] CRAN (R 3.5.0) ## gbRd 0.4-11 2012-10-01 [1] CRAN (R 3.5.0) ## gdata 2.18.0 2017-06-06 [1] CRAN (R 3.5.0) ## GenomeInfoDb * 1.18.1 2018-11-12 [1] Bioconductor ## GenomeInfoDbData 1.2.0 2018-11-07 [1] Bioconductor ## GenomicRanges * 1.34.0 2018-10-30 [1] Bioconductor ## geometry 0.3-6 2015-09-09 [1] CRAN (R 3.5.0) ## ggplot2 * 3.1.0 2018-10-25 [1] CRAN (R 3.5.0) ## ggridges 0.5.1 2018-09-27 [1] CRAN (R 3.5.0) ## glue 1.3.0 2018-07-17 [1] CRAN (R 3.5.0) ## gower 0.1.2 2017-02-23 [1] CRAN (R 3.5.0) ## gplots 3.0.1 2016-03-30 [1] CRAN (R 3.5.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 3.5.0) ## gtable 0.2.0 2016-02-26 [1] CRAN (R 3.5.0) ## gtools 3.8.1 2018-06-26 [1] CRAN (R 3.5.0) ## haven 1.1.2 2018-06-27 [1] CRAN (R 3.5.0) ## hdf5r 1.0.1 2018-10-07 [1] CRAN (R 3.5.0) ## Hmisc 4.1-1 2018-01-03 [1] CRAN (R 3.5.0) ## hms 0.4.2 2018-03-10 [1] CRAN (R 3.5.0) ## htmlTable 1.12 2018-05-26 [1] CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.5.0) ## htmlwidgets 1.3 2018-09-30 [1] CRAN (R 3.5.0) ## httr 1.3.1 2017-08-20 [1] CRAN (R 3.5.0) ## ica 1.0-2 2018-05-24 [1] CRAN (R 3.5.0) ## igraph 1.2.2 2018-07-27 [1] CRAN (R 3.5.0) ## ipred 0.9-8 2018-11-05 [1] CRAN (R 3.5.0) ## IRanges * 2.16.0 2018-10-30 [1] Bioconductor ## irlba * 2.3.2 2018-01-11 [1] CRAN (R 3.5.0) ## iterators 1.0.10 2018-07-13 [1] CRAN (R 3.5.0) ## jsonlite 1.5 2017-06-01 [1] CRAN (R 3.5.0) ## kernlab * 0.9-27 2018-08-10 [1] CRAN (R 3.5.0) ## KernSmooth 2.23-15 2015-06-29 [1] CRAN (R 3.5.1) ## knitr 1.20 2018-02-20 [1] CRAN (R 3.5.0) ## labeling 0.3 2014-08-23 [1] CRAN (R 3.5.0) ## lars 1.2 2013-04-24 [1] CRAN (R 3.5.0) ## lattice * 0.20-38 2018-11-04 [1] CRAN (R 3.5.0) ## latticeExtra 0.6-28 2016-02-09 [1] CRAN (R 3.5.0) ## lava 1.6.3 2018-08-10 [1] CRAN (R 3.5.0) ## lazyeval 0.2.1 2017-10-29 [1] CRAN (R 3.5.0) ## lmtest 0.9-36 2018-04-04 [1] CRAN (R 3.5.0) ## lsei 1.2-0 2017-10-23 [1] CRAN (R 3.5.0) ## lubridate 1.7.4 2018-04-11 [1] CRAN (R 3.5.0) ## magic 1.5-9 2018-09-17 [1] CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 [1] CRAN (R 3.5.0) ## MASS 7.3-51.1 2018-11-01 [1] CRAN (R 3.5.0) ## Matrix * 1.2-15 2018-11-01 [1] CRAN (R 3.5.0) ## matrixStats * 0.54.0 2018-07-23 [1] CRAN (R 3.5.0) ## mclust 5.4.2 2018-11-17 [1] CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 [1] CRAN (R 3.5.0) ## metap 1.0 2018-07-25 [1] CRAN (R 3.5.0) ## mixtools 1.1.0 2017-03-10 [1] CRAN (R 3.5.0) ## ModelMetrics 1.2.2 2018-11-03 [1] CRAN (R 3.5.0) ## modelr 0.1.2 2018-05-11 [1] CRAN (R 3.5.0) ## modeltools 0.2-22 2018-07-16 [1] CRAN (R 3.5.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 3.5.0) ## mvtnorm 1.0-8 2018-05-31 [1] CRAN (R 3.5.0) ## nlme 3.1-137 2018-04-07 [1] CRAN (R 3.5.1) ## nnet 7.3-12 2016-02-02 [1] CRAN (R 3.5.1) ## npsurv 0.4-0 2017-10-14 [1] CRAN (R 3.5.0) ## pbapply 1.3-4 2018-01-10 [1] CRAN (R 3.5.0) ## pillar 1.3.0 2018-07-14 [1] CRAN (R 3.5.0) ## pkgbuild 1.0.2 2018-10-16 [1] CRAN (R 3.5.1) ## pkgconfig 2.0.2 2018-08-16 [1] CRAN (R 3.5.0) ## pkgload 1.0.2 2018-10-29 [1] CRAN (R 3.5.0) ## pls 2.7-0 2018-08-21 [1] CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 [1] CRAN (R 3.5.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.5.0) ## prabclus 2.2-6 2015-01-14 [1] CRAN (R 3.5.0) ## prettyunits 1.0.2 2015-07-13 [1] CRAN (R 3.5.0) ## processx 3.2.0 2018-08-16 [1] CRAN (R 3.5.0) ## prodlim 2018.04.18 2018-04-18 [1] CRAN (R 3.5.0) ## proxy 0.4-22 2018-04-08 [1] CRAN (R 3.5.0) ## ps 1.2.1 2018-11-06 [1] CRAN (R 3.5.0) ## purrr * 0.2.5 2018-05-29 [1] CRAN (R 3.5.0) ## R.methodsS3 1.7.1 2016-02-16 [1] CRAN (R 3.5.0) ## R.oo 1.22.0 2018-04-22 [1] CRAN (R 3.5.0) ## R.utils 2.7.0 2018-08-27 [1] CRAN (R 3.5.0) ## R6 2.3.0 2018-10-04 [1] CRAN (R 3.5.0) ## RANN 2.6 2018-07-16 [1] CRAN (R 3.5.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 3.5.0) ## Rcpp 1.0.0 2018-11-07 [1] CRAN (R 3.5.0) ## RcppRoll 0.3.0 2018-06-05 [1] CRAN (R 3.5.0) ## RCurl 1.95-4.11 2018-07-15 [1] CRAN (R 3.5.0) ## Rdpack 0.10-1 2018-10-04 [1] CRAN (R 3.5.0) ## readr * 1.1.1 2017-05-16 [1] CRAN (R 3.5.0) ## readxl 1.1.0 2018-04-20 [1] CRAN (R 3.5.0) ## recipes 0.1.3 2018-06-16 [1] CRAN (R 3.5.0) ## remotes 2.0.2 2018-10-30 [1] CRAN (R 3.5.1) ## reshape2 1.4.3 2017-12-11 [1] CRAN (R 3.5.0) ## reticulate 1.10 2018-08-05 [1] CRAN (R 3.5.0) ## rlang 0.3.0.1 2018-10-25 [1] CRAN (R 3.5.0) ## rmarkdown 1.10 2018-06-11 [1] CRAN (R 3.5.0) ## robustbase 0.93-3 2018-09-21 [1] CRAN (R 3.5.0) ## ROCR 1.0-7 2015-03-26 [1] CRAN (R 3.5.0) ## rpart 4.1-13 2018-02-23 [1] CRAN (R 3.5.1) ## rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.5.0) ## rstudioapi 0.8 2018-10-02 [1] CRAN (R 3.5.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.5.0) ## rvest 0.3.2 2016-06-17 [1] CRAN (R 3.5.0) ## S4Vectors * 0.20.1 2018-11-09 [1] Bioconductor ## scales 1.0.0 2018-08-09 [1] CRAN (R 3.5.0) ## scPred * 0.0.0.9000 2018-12-06 [1] local ## SDMTools 1.1-221 2014-08-05 [1] CRAN (R 3.5.0) ## segmented 0.5-3.0 2017-11-30 [1] CRAN (R 3.5.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.5.0) ## Seurat * 2.3.4 2018-07-17 [1] CRAN (R 3.5.0) ## sfsmisc 1.1-2 2018-03-05 [1] CRAN (R 3.5.0) ## SingleCellExperiment * 1.4.0 2018-10-30 [1] Bioconductor ## snow 0.4-3 2018-09-14 [1] CRAN (R 3.5.0) ## stringi 1.2.4 2018-07-20 [1] CRAN (R 3.5.0) ## stringr * 1.3.1 2018-05-10 [1] CRAN (R 3.5.0) ## SummarizedExperiment * 1.12.0 2018-10-30 [1] Bioconductor ## survival 2.43-1 2018-10-29 [1] CRAN (R 3.5.0) ## tibble * 1.4.2 2018-01-22 [1] CRAN (R 3.5.0) ## tidyr * 0.8.2 2018-10-28 [1] CRAN (R 3.5.0) ## tidyselect 0.2.5 2018-10-11 [1] CRAN (R 3.5.0) ## tidyverse * 1.2.1 2017-11-14 [1] CRAN (R 3.5.0) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 3.5.0) ## trimcluster 0.1-2.1 2018-07-20 [1] CRAN (R 3.5.0) ## tsne 0.1-3 2016-07-15 [1] CRAN (R 3.5.0) ## usethis 1.4.0 2018-08-14 [1] CRAN (R 3.5.0) ## withr 2.1.2 2018-03-15 [1] CRAN (R 3.5.0) ## xfun 0.4 2018-10-23 [1] CRAN (R 3.5.0) ## xml2 1.2.0 2018-01-24 [1] CRAN (R 3.5.0) ## XVector 0.22.0 2018-10-30 [1] Bioconductor ## yaml 2.2.0 2018-07-25 [1] CRAN (R 3.5.0) ## zlibbioc 1.28.0 2018-10-30 [1] Bioconductor ## zoo 1.8-4 2018-09-19 [1] CRAN (R 3.5.0) ## ## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library  ","date":1547596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547596800,"objectID":"f88372ed1a0cd3cbf80bfe72fd05494c","permalink":"/post/scpred-integration-with-seurat/","publishdate":"2019-01-16T00:00:00Z","relpermalink":"/post/scpred-integration-with-seurat/","section":"post","summary":"In this tutorial, I’ll show how to incorporate prediction analyses using Seurat along with scPred.\nFirst, we’ll load scPred and the tidyverse:\nlibrary(scPred) library(tidyverse) Let’s load Seurat:\nlibrary(Seurat) We’ll work with a dataset obtained to analyze the ventral midbrain development in human (see Molecular Diversity of Midbrain Development in Mouse, Human, and Stem Cells). The data will be downloaded from Hemberg’s lab:\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/manno_human.rds\u0026quot;, destfile = \u0026quot;~/Downloads/manno_human.rds\u0026quot;) Then we import the data and convert the scater object into Seurat","tags":[],"title":"scPred integration with Seurat","type":"post"},{"authors":null,"categories":[],"content":" Summary scPred is a general method to predict cell types based on variance structure decomposition. It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.\nFor more details see our pre-print on bioRxiv:\nscPred: Single cell prediction using singular value decomposition and machine learning classification\n Application of scPred First, we load the scPred package, and tidyverse.\nlibrary(\u0026quot;scPred\u0026quot;) library(\u0026quot;tidyverse\u0026quot;) We will work with single cell data from pluripotent, blood, skin and neural cells sequenced at low coverage. For more details about the study, see Low-coverage single-cell mRNA sequencing reveals cellular heterogeneity and activated signaling pathways in developing cerebral cortex.\nThe count matrix and metadata may be obtained here from Hemberg’s lab.\nRead the gene expression data (SingleCellExperiment object), calculate CPM values and extract metadata.\ndownload.file(\u0026quot;https://scrnaseq-public-datasets.s3.amazonaws.com/scater-objects/pollen.rds\u0026quot;, destfile = \u0026quot;~/Downloads/pollen.rds\u0026quot;) require(\u0026quot;SingleCellExperiment\u0026quot;) pollen \u0026lt;- readRDS(\u0026quot;~/Downloads/pollen.rds\u0026quot;) pollen_counts \u0026lt;- normcounts(pollen) pollen_cpm \u0026lt;- apply(pollen_counts, 2, function(x) (x/sum(x))*1000000) pollen_metadata \u0026lt;- as.data.frame(colData(pollen)) Let’s explore the cell type information\ntable(pollen_metadata$cell_type2) ## ## blood dermal neural pluripotent ## 113 99 65 24 A total of 301 cells are included in the dataset.\nFor demostration purposes, we split a gene expression matrix into two groups (train and test datasets) based cell type information using the createDataPartition() function from the caret package (already loaded with scPred).\nThe train partition will be used to train a prediction models for each cell type and finally, the models will be tested using the test partition.\nset.seed(1234) i \u0026lt;- createDataPartition(pollen_metadata$cell_type2, p = 0.70, list = FALSE) train_data \u0026lt;- pollen_cpm[, i] test_data \u0026lt;- pollen_cpm[, -i] train_info \u0026lt;- pollen_metadata[i, , drop = FALSE] test_info \u0026lt;- pollen_metadata[-i, , drop = FALSE]  Training step Eigendecomposition The first part of the scPred algorithm consists on decomposing the gene expresion matrix of the training dataset to obtained a low dimensional space that can describe most of the variance of the dataset. The eigenDecompose function calculates the first n principal components and log-transforms the input gene expression values to stabilize the variance. It returns an scPred object.\nset.seed(1234) scp \u0026lt;- eigenDecompose(train_data, n = 10) Then, we assign the metadata containing the cell type information. Row names in the metadata dataframe must match the row names from the eigendecompsed gene expression matrix.\nscPred::metadata(scp) \u0026lt;- train_info  Feature selection Next, we select the principal components that explain the class identity of each cell type using the getFeatureSpace function. This function applies a Wilcoxcon rank sum test to determine the informative principal components according to a categorical variable variable. In this case, we want to predict the cell types in the cell_type2 columns from the metadata. Run ?getFeatureSpace for more details.\nscp \u0026lt;- getFeatureSpace(scp, pVar = \u0026quot;cell_type2\u0026quot;) ## ## DONE! The features slot contains the principal components that explain the class identity.\n pValue contains the associated p-value for each principal component obtained using the Wilcoxon Rank sum test pValueAdj is the adjusted p-value depending omn the correction criterion applied. By defauls a false discovery rate corrections is performed expVar contrains the explained variance by each principal component cumExpVar contains the cumulative variance explained  All prrincipal components for each cell type are ranked by p-value.\nscp@features ## $blood ## PC pValue pValueAdj expVar cumExpVar ## 1 PC2 6.186072e-26 6.186072e-25 20.291116 20.29112 ## 2 PC5 3.594918e-10 1.797459e-09 8.573597 28.86471 ## 3 PC3 2.822222e-08 9.407408e-08 11.433759 40.29847 ## 4 PC4 2.866624e-07 7.166560e-07 10.080527 50.37900 ## ## $dermal ## PC pValue pValueAdj expVar cumExpVar ## 1 PC2 1.378227e-29 1.378227e-28 20.29112 20.29112 ## 2 PC1 1.300270e-09 6.501350e-09 26.21813 46.50925 ## 3 PC4 7.311207e-08 2.437069e-07 10.08053 56.58977 ## 4 PC6 2.872213e-05 7.180532e-05 7.26231 63.85208 ## 5 PC3 2.034155e-04 4.068310e-04 11.43376 75.28584 ## ## $neural ## PC pValue pValueAdj expVar cumExpVar ## 1 PC1 9.513036e-21 9.513036e-20 26.21813 26.21813 ## 2 PC4 1.103454e-15 5.517270e-15 10.08053 36.29866 ## 3 PC3 7.019078e-05 2.339693e-04 11.43376 47.73242 ## ## $pluripotent ## PC pValue pValueAdj expVar cumExpVar ## 1 PC6 8.590373e-12 8.590373e-11 7.262310 7.26231 ## 2 PC4 2.420729e-10 1.210364e-09 10.080527 17.34284 ## 3 PC5 1.797335e-08 5.991115e-08 8.573597 25.91643 ## 4 PC9 1.169709e-07 2.924273e-07 3.512692 29.42913 ## 5 PC8 9.169523e-05 1.833905e-04 4.313980 33.74311 ## 6 PC10 4.675783e-03 7.792971e-03 3.418549 37.16165 ## 7 PC3 1.065838e-02 1.522625e-02 11.433759 48.59541 ## 8 PC2 1.376060e-02 1.720075e-02 20.291116 68.88653 We can plot the principal components grouped by the prediction variable using the plotEigen() function\nplotEigen(scp, group = \u0026quot;cell_type2\u0026quot;)  Model training We can now train prediction models for blood, dermal, neural, and pluripotent cell types.\nscp \u0026lt;- trainModel(scp, seed = 66) If we print the scPred object we can look at a summary of the slots contained in it.\n Expression data: shows the number of cells, genes, and principal components computed. Metadata information: Show the columns in the metadata slot. If columns are factor objects, they can be used as response veriables to train a prediction model Prediction variable: Shows the prediction variable as indicated using the getFeatureSpace() function Informative PCs per class: shows the number of discriminant principal components for each class (e.g. cell type) Training: Shows the description of the classification model used for training. For each class, performance metrics such as AUROC,accuracy or kappa are shown  The four models showed a specificity of 1 and a sensitivity of 0.99 to 1.\nscp ## \u0026#39;scPred\u0026#39; object ## ## - Expression data ## Cell embeddings = 213 ## Gene loadings = 21413 ## PCs = 10 ## ## - Metadata information ## cell_type1, cell_type2 ## Prediction variable = cell_type2 ## n ## blood 80 ## dermal 70 ## neural 46 ## pluripotent 17 ## ## - Informative PCs per class ## Features ## blood 4 ## dermal 5 ## neural 3 ## pluripotent 8 ## ## - Training information ## Model: Support Vector Machines with Radial Basis Function Kernel ## ROC Sens Spec ## blood 1 0.988 1 ## dermal 1 1 1 ## neural 1 1 1 ## pluripotent 1 1 1 We can plot the distribution of probabilities to see the performance of the predictions for each cell class using\nThe getTrainResults() function extracts the predictions results obtained from the resampling step for training the prediction model.\nres \u0026lt;- getTrainResults(scp) We can plot the calculated probabilities for each cell type versus our cell labels:\nplotTrainProbs(scp) In the previous figure we can observe that a threshold of 0.9 classifies all dermal, neural and pluripotent cells correctly and almost all blood cells too. Each panel represents a prediction model and the colors the known true classes. All other cells are cells except the positive class (for example, for the blood prediction model all other cells are either dermal, neural, or pluripotent)\n  Prediction step Once the models have been trained they can be applied to predict cell types in other dataset, for this demonstration we’ll use the test partition/ scPredict() projects the training principal axes onto the test dataset and predicts the cell identity using the trained models. By default, scPredict() uses a threshold of 0.9 to classify the cells into categories.\nscp \u0026lt;- scPredict(scp, newData = test_data, threshold = 0.9) ## Predicting cell types scPredict() adds a dataframe with the probabilities of each cell to belong to any of the cell classes. The predClass columns is set using the provided threshold. Use getPredictions to obtain the prediction results\ngetPredictions(scp) ## blood dermal neural pluripotent predClass ## Hi_2338_1 0.006655574 0.998660453 0.007440833 0.005008749 dermal ## Hi_2338_2 0.005973183 0.997339365 0.007017599 0.004993949 dermal ## Hi_2338_4 0.011011438 0.993270822 0.009921552 0.004863217 dermal ## Hi_2338_5 0.017761575 0.995914310 0.006822524 0.003790517 dermal ## Hi_2338_17 0.024224216 0.902759744 0.014851823 0.005114912 dermal ## Hi_2339_7 0.993408005 0.012042407 0.008148723 0.005297627 blood ## Hi_2339_8 0.997380247 0.007232218 0.005281070 0.005404905 blood ## Hi_2339_9 0.964734320 0.006105625 0.013411268 0.005270132 blood ## Hi_2339_11 0.993005444 0.007104105 0.004966572 0.005266716 blood ## Hi_2339_14 0.965739837 0.038056046 0.006520396 0.005291290 blood ## Hi_K562_2 0.995894429 0.005652630 0.002859333 0.003933956 blood ## Hi_K562_4 0.989691640 0.007281384 0.009687081 0.004711426 blood ## Hi_K562_10 0.988013653 0.006033125 0.002608131 0.004933491 blood ## Hi_BJ_1 0.010147845 0.995365243 0.005814412 0.003934623 dermal ## Hi_BJ_2 0.007979329 0.990617637 0.009042959 0.005142634 dermal ## Hi_BJ_6 0.009356208 0.995618949 0.008309160 0.005081296 dermal ## Hi_BJ_8 0.010222853 0.993650077 0.006426775 0.005213273 dermal ## Hi_BJ_10 0.007288164 0.996559180 0.005883454 0.004426564 dermal ## Hi_BJ_11 0.007089321 0.992122295 0.007084840 0.005234733 dermal ## Hi_BJ_12 0.007945532 0.995737015 0.005083199 0.004575928 dermal ## Hi_BJ_17 0.008009722 0.994678439 0.007570398 0.005267640 dermal ## Hi_BJ_19 0.007158134 0.989414384 0.008616647 0.005318316 dermal ## Hi_BJ_30 0.008399897 0.996345448 0.006304303 0.004977630 dermal ## Hi_BJ_34 0.009390083 0.996917264 0.007515548 0.003791881 dermal ## Hi_K562_19 0.994617229 0.006784354 0.009251010 0.004032127 blood ## Hi_K562_20 0.953711538 0.008983164 0.004315662 0.004139086 blood ## Hi_K562_22 0.994391053 0.005913928 0.004323663 0.004350141 blood ## Hi_K562_23 0.996412632 0.005749871 0.005622456 0.004688460 blood ## Hi_K562_25 0.994925606 0.005923280 0.004797062 0.004736955 blood ## Hi_K562_31 0.996464299 0.005393526 0.003702113 0.004653050 blood ## Hi_K562_34 0.995227159 0.006150064 0.005739733 0.005181145 blood ## Hi_K562_36 0.996773580 0.005926799 0.006433327 0.004128915 blood ## Hi_K562_38 0.995700707 0.005717990 0.003582286 0.004625779 blood ## Hi_K562_40 0.995912496 0.005283276 0.002926409 0.004131597 blood ## Hi_K562_41 0.996614506 0.005355295 0.004310329 0.004487103 blood ## Hi_HL60_2 0.996008108 0.003203810 0.005795405 0.005781991 blood ## Hi_HL60_4 0.986202938 0.002948087 0.016482828 0.004618730 blood ## Hi_HL60_6 0.997596728 0.001202118 0.007585141 0.004881546 blood ## Hi_HL60_7 0.982888385 0.006903896 0.009560793 0.005386941 blood ## Hi_HL60_14 0.997717195 0.001131019 0.005303001 0.005319333 blood ## Hi_HL60_15 0.995420209 0.007555687 0.008033794 0.005274040 blood ## Hi_HL60_23 0.994897770 0.002550216 0.006079878 0.005537385 blood ## Hi_HL60_33 0.996792166 0.004219183 0.006055872 0.005153092 blood ## Hi_HL60_36 0.995829430 0.003149186 0.005590083 0.005020133 blood ## Hi_HL60_37 0.996538603 0.006027821 0.008660022 0.005188622 blood ## Hi_HL60_43 0.996048487 0.003662060 0.005691881 0.004947445 blood ## Hi_HL60_48 0.996612696 0.004402476 0.007093712 0.005819822 blood ## Hi_HL60_52 0.995951072 0.004375453 0.007077423 0.004929013 blood ## Hi_HL60_54 0.997391250 0.003718601 0.006168916 0.005145309 blood ## Hi_iPS_1 0.006773016 0.006315371 0.005107275 0.956066585 pluripotent ## Hi_iPS_4 0.005459630 0.005991352 0.006274916 0.938805907 pluripotent ## Hi_iPS_7 0.007263328 0.006166505 0.003852328 0.968535863 pluripotent ## Hi_iPS_8 0.006315538 0.004690963 0.087484043 0.919976331 pluripotent ## Hi_iPS_10 0.005696906 0.006815225 0.002949809 0.962067845 pluripotent ## Hi_iPS_16 0.005472227 0.006513774 0.004396123 0.957438517 pluripotent ## Hi_iPS_23 0.006540182 0.005926688 0.005573124 0.937271921 pluripotent ## Hi_Kera_2 0.005790139 0.990108122 0.007238154 0.004516796 dermal ## Hi_Kera_6 0.007670905 0.986628692 0.006459826 0.005081581 dermal ## Hi_Kera_7 0.003594498 0.996075392 0.006550450 0.003735429 dermal ## Hi_Kera_8 0.006915099 0.996701772 0.007179775 0.003988914 dermal ## Hi_Kera_9 0.010128375 0.979702056 0.005616018 0.004241848 dermal ## Hi_Kera_10 0.002340482 0.996582641 0.006275293 0.004080611 dermal ## Hi_Kera_11 0.004360678 0.992117012 0.006753084 0.003618161 dermal ## Hi_Kera_13 0.006507960 0.997093650 0.006786817 0.003808263 dermal ## Hi_Kera_14 0.013371787 0.984571905 0.006841817 0.004315511 dermal ## Hi_Kera_16 0.012030558 0.970493319 0.005210746 0.004419983 dermal ## Hi_Kera_25 0.004569195 0.994097757 0.006362785 0.003744171 dermal ## Hi_Kera_39 0.004015330 0.990008026 0.006202351 0.003942094 dermal ## Hi_Kera_40 0.077702287 0.758051254 0.006991119 0.004444502 unassigned ## Hi_GW21.2_2 0.005387813 0.005735801 0.997628545 0.004467574 neural ## Hi_GW21.2_7 0.006159599 0.005077643 0.999277999 0.005481054 neural ## Hi_GW21.2_8 0.007246919 0.005188322 0.999270411 0.006086767 neural ## Hi_GW21.2_10 0.006596429 0.004754111 0.999664466 0.006450892 neural ## Hi_GW21.2_13 0.007135911 0.005351180 0.998825375 0.006651554 neural ## Hi_GW21.2_14 0.036515341 0.009006564 0.985959169 0.006464392 neural ## Hi_GW21_3 0.006739270 0.003618348 0.999669848 0.004820192 neural ## Hi_GW21_5 0.010231166 0.013654829 0.998429909 0.003903365 neural ## Hi_NPC_3 0.004529544 0.005334441 0.998956256 0.004840688 neural ## Hi_NPC_10 0.004695227 0.004655696 0.998736001 0.004358542 neural ## Hi_NPC_13 0.005328657 0.004962464 0.993770313 0.006186660 neural ## Hi_GW16_1 0.009173163 0.005942934 0.998591466 0.004733403 neural ## Hi_GW16_2 0.012745847 0.006665138 0.996897389 0.004280930 neural ## Hi_GW16_8 0.007429963 0.004603408 0.994664971 0.005579575 neural ## Hi_GW16_9 0.009558793 0.007997607 0.997377036 0.003998157 neural ## Hi_GW16_20 0.005432284 0.004486833 0.999827641 0.003163558 neural ## Hi_GW16_23 0.024155920 0.004874453 0.999093780 0.004073243 neural ## Hi_GW16_24 0.008210821 0.003561112 0.999554156 0.004285415 neural ## Hi_GW16_26 0.008582737 0.007208059 0.998088158 0.003999236 neural We can obtain a contingency table showing the prediction results versus the true cell type labels. First, we assign the metadata containing the true cell types to the predMeta slot\nscp@predMeta \u0026lt;- test_info Then, we can use the crossTab() function to obtain the contingency table. The true parameter indicates the column in predMeta that contains the true labels.\ncrossTab(scp, true = \u0026quot;cell_type2\u0026quot;) ## blood dermal neural pluripotent ## blood 1 0.00 0 0 ## dermal 0 0.97 0 0 ## neural 0 0.00 1 0 ## pluripotent 0 0.00 0 1 ## unassigned 0 0.03 0 0 The rows correspond to the prediction labels provided by scPred and the columns to the true column in @predMeta By default crossTab returns the proportion of cells classified for each possible group. Set prop = FALSE to get the cell counts instead of proportions.\ncrossTab(scp, true = \u0026quot;cell_type2\u0026quot;, prop = FALSE) ## blood dermal neural pluripotent ## blood 33 0 0 0 ## dermal 0 28 0 0 ## neural 0 0 19 0 ## pluripotent 0 0 0 7 ## unassigned 0 1 0 0 We can plot the probabilities using the plotPredProbs\nplotPredProbs(scp) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. In the previous plot, each panel represents the predictions each cell type across the different models. Each distribution and its colors represent the cell type evaluated by each prediction model in @train. We can observe that all blood, neural and pluripotent cells were correctly classified using a threshold of 0.9. Only one dermal cell was labeled as unassigned as it was below the threshold. This cell has a probability of 0.75 of being dermal.\n Reproducibility options(width = 70) devtools::session_info(include_base = TRUE) ## ─ Session info ───────────────────────────────────────────────────── ## setting value ## version R version 3.5.1 (2018-07-02) ## os macOS High Sierra 10.13.6 ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz Australia/Sydney ## date 2018-12-06 ## ## ─ Packages ───────────────────────────────────────────────────────── ## ! package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.5.0) ## acepack 1.4.1 2016-10-29 [1] CRAN (R 3.5.0) ## ape 5.2 2018-09-24 [1] CRAN (R 3.5.0) ## assertthat 0.2.0 2017-04-11 [1] CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 [1] CRAN (R 3.5.0) ## base * 3.5.1 2018-07-05 [?] local ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 3.5.0) ## bibtex 0.4.2 2017-06-30 [1] CRAN (R 3.5.0) ## bindr 0.1.1 2018-03-13 [1] CRAN (R 3.5.0) ## bindrcpp * 0.2.2 2018-03-29 [1] CRAN (R 3.5.0) ## Biobase * 2.42.0 2018-10-30 [1] Bioconductor ## BiocGenerics * 0.28.0 2018-10-30 [1] Bioconductor ## BiocParallel * 1.16.0 2018-10-30 [1] Bioconductor ## bit 1.1-14 2018-05-29 [1] CRAN (R 3.5.0) ## bit64 0.9-7 2017-05-08 [1] CRAN (R 3.5.0) ## bitops 1.0-6 2013-08-17 [1] CRAN (R 3.5.0) ## blogdown 0.9 2018-10-23 [1] CRAN (R 3.5.0) ## bookdown 0.8 2018-12-03 [1] CRAN (R 3.5.0) ## broom 0.5.0 2018-07-17 [1] CRAN (R 3.5.0) ## callr 3.0.0 2018-08-24 [1] CRAN (R 3.5.0) ## caret * 6.0-80 2018-05-26 [1] CRAN (R 3.5.0) ## caTools 1.17.1.1 2018-07-20 [1] CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.5.0) ## checkmate 1.8.5 2017-10-24 [1] CRAN (R 3.5.0) ## class 7.3-14 2015-08-30 [1] CRAN (R 3.5.1) ## cli 1.0.1 2018-09-25 [1] CRAN (R 3.5.0) ## cluster 2.0.7-1 2018-04-13 [1] CRAN (R 3.5.0) ## codetools 0.2-15 2016-10-05 [1] CRAN (R 3.5.1) ## colorspace 1.3-2 2016-12-14 [1] CRAN (R 3.5.0) ## P compiler 3.5.1 2018-07-05 [1] local ## cowplot 0.9.3 2018-07-15 [1] CRAN (R 3.5.0) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 3.5.0) ## CVST 0.2-2 2018-05-26 [1] CRAN (R 3.5.0) ## data.table 1.11.8 2018-09-30 [1] CRAN (R 3.5.0) ## P datasets * 3.5.1 2018-07-05 [1] local ## ddalpha 1.3.4 2018-06-23 [1] CRAN (R 3.5.0) ## DelayedArray * 0.8.0 2018-10-30 [1] Bioconductor ## DEoptimR 1.0-8 2016-11-19 [1] CRAN (R 3.5.0) ## desc 1.2.0 2018-05-01 [1] CRAN (R 3.5.0) ## devtools 2.0.1 2018-10-26 [1] CRAN (R 3.5.1) ## digest 0.6.18 2018-10-10 [1] CRAN (R 3.5.0) ## dimRed 0.1.0 2017-05-04 [1] CRAN (R 3.5.0) ## diptest 0.75-7 2016-12-05 [1] CRAN (R 3.5.0) ## doSNOW 1.0.16 2017-12-13 [1] CRAN (R 3.5.0) ## dplyr * 0.7.8 2018-11-10 [1] CRAN (R 3.5.0) ## DRR 0.0.3 2018-01-06 [1] CRAN (R 3.5.0) ## dtw 1.20-1 2018-05-18 [1] CRAN (R 3.5.0) ## evaluate 0.12 2018-10-09 [1] CRAN (R 3.5.0) ## fitdistrplus 1.0-11 2018-09-10 [1] CRAN (R 3.5.0) ## flexmix 2.3-14 2017-04-28 [1] CRAN (R 3.5.0) ## forcats * 0.3.0 2018-02-19 [1] CRAN (R 3.5.0) ## foreach 1.4.4 2017-12-12 [1] CRAN (R 3.5.0) ## foreign 0.8-71 2018-07-20 [1] CRAN (R 3.5.0) ## Formula 1.2-3 2018-05-03 [1] CRAN (R 3.5.0) ## fpc 2.1-11.1 2018-07-20 [1] CRAN (R 3.5.0) ## fs 1.2.6 2018-08-23 [1] CRAN (R 3.5.0) ## gbRd 0.4-11 2012-10-01 [1] CRAN (R 3.5.0) ## gdata 2.18.0 2017-06-06 [1] CRAN (R 3.5.0) ## GenomeInfoDb * 1.18.1 2018-11-12 [1] Bioconductor ## GenomeInfoDbData 1.2.0 2018-11-07 [1] Bioconductor ## GenomicRanges * 1.34.0 2018-10-30 [1] Bioconductor ## geometry 0.3-6 2015-09-09 [1] CRAN (R 3.5.0) ## ggplot2 * 3.1.0 2018-10-25 [1] CRAN (R 3.5.0) ## ggridges 0.5.1 2018-09-27 [1] CRAN (R 3.5.0) ## glue 1.3.0 2018-07-17 [1] CRAN (R 3.5.0) ## gower 0.1.2 2017-02-23 [1] CRAN (R 3.5.0) ## gplots 3.0.1 2016-03-30 [1] CRAN (R 3.5.0) ## P graphics * 3.5.1 2018-07-05 [1] local ## P grDevices * 3.5.1 2018-07-05 [1] local ## P grid 3.5.1 2018-07-05 [1] local ## gridExtra 2.3 2017-09-09 [1] CRAN (R 3.5.0) ## gtable 0.2.0 2016-02-26 [1] CRAN (R 3.5.0) ## gtools 3.8.1 2018-06-26 [1] CRAN (R 3.5.0) ## haven 1.1.2 2018-06-27 [1] CRAN (R 3.5.0) ## hdf5r 1.0.1 2018-10-07 [1] CRAN (R 3.5.0) ## Hmisc 4.1-1 2018-01-03 [1] CRAN (R 3.5.0) ## hms 0.4.2 2018-03-10 [1] CRAN (R 3.5.0) ## htmlTable 1.12 2018-05-26 [1] CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.5.0) ## htmlwidgets 1.3 2018-09-30 [1] CRAN (R 3.5.0) ## httr 1.3.1 2017-08-20 [1] CRAN (R 3.5.0) ## ica 1.0-2 2018-05-24 [1] CRAN (R 3.5.0) ## igraph 1.2.2 2018-07-27 [1] CRAN (R 3.5.0) ## ipred 0.9-8 2018-11-05 [1] CRAN (R 3.5.0) ## IRanges * 2.16.0 2018-10-30 [1] Bioconductor ## irlba * 2.3.2 2018-01-11 [1] CRAN (R 3.5.0) ## iterators 1.0.10 2018-07-13 [1] CRAN (R 3.5.0) ## jsonlite 1.5 2017-06-01 [1] CRAN (R 3.5.0) ## kernlab * 0.9-27 2018-08-10 [1] CRAN (R 3.5.0) ## KernSmooth 2.23-15 2015-06-29 [1] CRAN (R 3.5.1) ## knitr 1.20 2018-02-20 [1] CRAN (R 3.5.0) ## labeling 0.3 2014-08-23 [1] CRAN (R 3.5.0) ## lars 1.2 2013-04-24 [1] CRAN (R 3.5.0) ## lattice * 0.20-38 2018-11-04 [1] CRAN (R 3.5.0) ## latticeExtra 0.6-28 2016-02-09 [1] CRAN (R 3.5.0) ## lava 1.6.3 2018-08-10 [1] CRAN (R 3.5.0) ## lazyeval 0.2.1 2017-10-29 [1] CRAN (R 3.5.0) ## lmtest 0.9-36 2018-04-04 [1] CRAN (R 3.5.0) ## lsei 1.2-0 2017-10-23 [1] CRAN (R 3.5.0) ## lubridate 1.7.4 2018-04-11 [1] CRAN (R 3.5.0) ## magic 1.5-9 2018-09-17 [1] CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 [1] CRAN (R 3.5.0) ## MASS 7.3-51.1 2018-11-01 [1] CRAN (R 3.5.0) ## Matrix * 1.2-15 2018-11-01 [1] CRAN (R 3.5.0) ## matrixStats * 0.54.0 2018-07-23 [1] CRAN (R 3.5.0) ## mclust 5.4.2 2018-11-17 [1] CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 [1] CRAN (R 3.5.0) ## metap 1.0 2018-07-25 [1] CRAN (R 3.5.0) ## P methods * 3.5.1 2018-07-05 [1] local ## mixtools 1.1.0 2017-03-10 [1] CRAN (R 3.5.0) ## ModelMetrics 1.2.2 2018-11-03 [1] CRAN (R 3.5.0) ## modelr 0.1.2 2018-05-11 [1] CRAN (R 3.5.0) ## modeltools 0.2-22 2018-07-16 [1] CRAN (R 3.5.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 3.5.0) ## mvtnorm 1.0-8 2018-05-31 [1] CRAN (R 3.5.0) ## nlme 3.1-137 2018-04-07 [1] CRAN (R 3.5.1) ## nnet 7.3-12 2016-02-02 [1] CRAN (R 3.5.1) ## npsurv 0.4-0 2017-10-14 [1] CRAN (R 3.5.0) ## P parallel * 3.5.1 2018-07-05 [1] local ## pbapply 1.3-4 2018-01-10 [1] CRAN (R 3.5.0) ## pillar 1.3.0 2018-07-14 [1] CRAN (R 3.5.0) ## pkgbuild 1.0.2 2018-10-16 [1] CRAN (R 3.5.1) ## pkgconfig 2.0.2 2018-08-16 [1] CRAN (R 3.5.0) ## pkgload 1.0.2 2018-10-29 [1] CRAN (R 3.5.0) ## pls 2.7-0 2018-08-21 [1] CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 [1] CRAN (R 3.5.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 3.5.0) ## prabclus 2.2-6 2015-01-14 [1] CRAN (R 3.5.0) ## prettyunits 1.0.2 2015-07-13 [1] CRAN (R 3.5.0) ## processx 3.2.0 2018-08-16 [1] CRAN (R 3.5.0) ## prodlim 2018.04.18 2018-04-18 [1] CRAN (R 3.5.0) ## proxy 0.4-22 2018-04-08 [1] CRAN (R 3.5.0) ## ps 1.2.1 2018-11-06 [1] CRAN (R 3.5.0) ## purrr * 0.2.5 2018-05-29 [1] CRAN (R 3.5.0) ## R.methodsS3 1.7.1 2016-02-16 [1] CRAN (R 3.5.0) ## R.oo 1.22.0 2018-04-22 [1] CRAN (R 3.5.0) ## R.utils 2.7.0 2018-08-27 [1] CRAN (R 3.5.0) ## R6 2.3.0 2018-10-04 [1] CRAN (R 3.5.0) ## RANN 2.6 2018-07-16 [1] CRAN (R 3.5.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 3.5.0) ## Rcpp 1.0.0 2018-11-07 [1] CRAN (R 3.5.0) ## RcppRoll 0.3.0 2018-06-05 [1] CRAN (R 3.5.0) ## RCurl 1.95-4.11 2018-07-15 [1] CRAN (R 3.5.0) ## Rdpack 0.10-1 2018-10-04 [1] CRAN (R 3.5.0) ## readr * 1.1.1 2017-05-16 [1] CRAN (R 3.5.0) ## readxl 1.1.0 2018-04-20 [1] CRAN (R 3.5.0) ## recipes 0.1.3 2018-06-16 [1] CRAN (R 3.5.0) ## remotes 2.0.2 2018-10-30 [1] CRAN (R 3.5.1) ## reshape2 1.4.3 2017-12-11 [1] CRAN (R 3.5.0) ## reticulate 1.10 2018-08-05 [1] CRAN (R 3.5.0) ## rlang 0.3.0.1 2018-10-25 [1] CRAN (R 3.5.0) ## rmarkdown 1.10 2018-06-11 [1] CRAN (R 3.5.0) ## robustbase 0.93-3 2018-09-21 [1] CRAN (R 3.5.0) ## ROCR 1.0-7 2015-03-26 [1] CRAN (R 3.5.0) ## rpart 4.1-13 2018-02-23 [1] CRAN (R 3.5.1) ## rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.5.0) ## rstudioapi 0.8 2018-10-02 [1] CRAN (R 3.5.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 3.5.0) ## rvest 0.3.2 2016-06-17 [1] CRAN (R 3.5.0) ## S4Vectors * 0.20.1 2018-11-09 [1] Bioconductor ## scales 1.0.0 2018-08-09 [1] CRAN (R 3.5.0) ## scPred * 0.0.0.9000 2018-12-06 [1] local ## SDMTools 1.1-221 2014-08-05 [1] CRAN (R 3.5.0) ## segmented 0.5-3.0 2017-11-30 [1] CRAN (R 3.5.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.5.0) ## Seurat 2.3.4 2018-07-17 [1] CRAN (R 3.5.0) ## sfsmisc 1.1-2 2018-03-05 [1] CRAN (R 3.5.0) ## SingleCellExperiment * 1.4.0 2018-10-30 [1] Bioconductor ## snow 0.4-3 2018-09-14 [1] CRAN (R 3.5.0) ## P splines 3.5.1 2018-07-05 [1] local ## P stats * 3.5.1 2018-07-05 [1] local ## P stats4 * 3.5.1 2018-07-05 [1] local ## stringi 1.2.4 2018-07-20 [1] CRAN (R 3.5.0) ## stringr * 1.3.1 2018-05-10 [1] CRAN (R 3.5.0) ## SummarizedExperiment * 1.12.0 2018-10-30 [1] Bioconductor ## survival 2.43-1 2018-10-29 [1] CRAN (R 3.5.0) ## tibble * 1.4.2 2018-01-22 [1] CRAN (R 3.5.0) ## tidyr * 0.8.2 2018-10-28 [1] CRAN (R 3.5.0) ## tidyselect 0.2.5 2018-10-11 [1] CRAN (R 3.5.0) ## tidyverse * 1.2.1 2017-11-14 [1] CRAN (R 3.5.0) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 3.5.0) ## P tools 3.5.1 2018-07-05 [1] local ## trimcluster 0.1-2.1 2018-07-20 [1] CRAN (R 3.5.0) ## tsne 0.1-3 2016-07-15 [1] CRAN (R 3.5.0) ## usethis 1.4.0 2018-08-14 [1] CRAN (R 3.5.0) ## P utils * 3.5.1 2018-07-05 [1] local ## withr 2.1.2 2018-03-15 [1] CRAN (R 3.5.0) ## xfun 0.4 2018-10-23 [1] CRAN (R 3.5.0) ## xml2 1.2.0 2018-01-24 [1] CRAN (R 3.5.0) ## XVector 0.22.0 2018-10-30 [1] Bioconductor ## yaml 2.2.0 2018-07-25 [1] CRAN (R 3.5.0) ## zlibbioc 1.28.0 2018-10-30 [1] Bioconductor ## zoo 1.8-4 2018-09-19 [1] CRAN (R 3.5.0) ## ## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library ## ## P ── Loaded and on-disk path mismatch.  ","date":1544054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544054400,"objectID":"4aeb4e632a77fbd2f1291c06dd0fc30e","permalink":"/post/introduction-to-scpred/","publishdate":"2018-12-06T00:00:00Z","relpermalink":"/post/introduction-to-scpred/","section":"post","summary":"Summary scPred is a general method to predict cell types based on variance structure decomposition. It selects the most cell type-informative principal components from a dataset and trains a prediction model for each cell type. The principal training axes are projected onto the test dataset to obtain the PCs scores for the test dataset and the trained model(s) is/are used to classify single cells.\nFor more details see our pre-print on bioRxiv:","tags":[],"title":"Introduction to scPred","type":"post"},{"authors":["Anne Senabouth","Sam Lukowski","**Jose Alquicira Hernandez**","Stacey Andersen","Xin Mei","Quan Nguyen","Joseph Powell"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1535724000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535724000,"objectID":"baf7fac5dc91c8a35f6c38188a1874cc","permalink":"/publication/ascend/","publishdate":"2018-09-01T00:00:00+10:00","relpermalink":"/publication/ascend/","section":"publication","summary":"ascend is an R package comprised of fast, streamlined analysis functions optimized to address the statistical challenges of single cell RNA-seq. The package incorporates novel and established methods to provide a flexible framework to perform filtering, quality control, normalization, dimension reduction, clustering, differential expression and a wide-range of plotting. ascend is designed to work with scRNA-seq data generated by any high-throughput platform, and includes functions to convert data objects between software packages. Availability: The R package and associated vignettes are freely available at https://github.com/IMB-Computational-Genomics-Lab/ascend. Contact: joseph.powell@uq.edu.au Supplementary information: An example dataset is available at ArrayExpress, accession number E-MTAB-6108","tags":[],"title":"ascend: R package for analysis of single cell RNA-seq data","type":"publication"},{"authors":["**Jose Alquicira Hernandez**","Quan Nguyen","Joseph Powell"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1535724000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1535724000,"objectID":"4563e50ee58f03b025006f3bacbd2e26","permalink":"/publication/scpred/","publishdate":"2018-09-01T00:00:00+10:00","relpermalink":"/publication/scpred/","section":"publication","summary":"Single-cell RNA sequencing has enabled the characterization of highly specific cell types in many human tissues, as well as both primary and stem cell-derived cell lines. An important facet of these studies is the ability to identify the transcriptional signatures that define a cell type or state. In theory, this information can be used to classify an unknown cell based on its transcriptional profile; and clearly, the ability to accurately predict a cell type and any pathologic-related state will play a critical role in the early diagnosis of disease and decisions around the personalized treatment for patients. Here we present a new generalizable method (scPred) for prediction of cell type(s), using a combination of unbiased feature selection from a reduced-dimension space, and machine-learning classification. scPred solves several problems associated with the identification of individual gene feature selection and is able to capture subtle effects of many genes, increasing the overall variance explained by the model, and correspondingly improving the prediction accuracy. We apply scPred to scRNA-seq data from pancreatic tissue, colorectal tumor biopsies, and circulating dendritic cells, and show that scPred is able to classify cell subtypes with an accuracy of 96.1-99.2%. Furthermore, we demonstrate that the feature selection step of scPred is able to discriminate from both transcriptional variation between single-cell RNA-sequencing protocols, and between laboratory batch effects, and still predict cell subtype with an accuracy greater the 96%. Collectively, our results demonstrate the utility of scPred as a single cell prediction method that can be used for a wide variety of applications. The generalized method is implemented in software available here: https://github.com/IMB-Computational-Genomics-Lab/scPred/","tags":[],"title":"scPred: Cell type prediction at single cell resolution","type":"publication"},{"authors":["José Alquicira Hernández"],"categories":null,"content":"Click on the Slides button above to view the built-in slides feature.\n Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1500127200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1500127200,"objectID":"b8fcca248adea81a963cab2b4197d2c6","permalink":"/talk/single_cell_oz_2018/","publishdate":"2017-07-16T00:00:00+10:00","relpermalink":"/talk/single_cell_oz_2018/","section":"talk","summary":"Click on the Slides button above to view the built-in slides feature.\n Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.","tags":[],"title":"scPred: cell type prediction at single cell resolution","type":"talk"},{"authors":["Abhinav Nellore","Andrew E Jaffe","Jean-Philippe Fortin","**José Alquicira-Hernández**","Leonardo Collado-Torres","Siruo Wang","Robert A Phillips III","Nishika Karbhari","Kasper D Hansen","Ben Langmead","Jeffrey T Leek"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1480510800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480510800,"objectID":"4adb581873886d6973677b02423d6bbf","permalink":"/publication/human_splicing_diversity/","publishdate":"2016-12-01T00:00:00+11:00","relpermalink":"/publication/human_splicing_diversity/","section":"publication","summary":"We aligned 21,504 Illumina-sequenced human RNA-seq samples from the Sequence Read Archive (SRA) to the human genome and compared detected exon-exon junctions with junctions in several recent gene annotations. We found 56,861 junctions (18.6%) in at least 1000 samples that were not annotated, and their expression associated with tissue type. Junctions well expressed in individual samples tended to be annotated. Newer samples contributed few novel well-supported junctions, with the vast majority of detected junctions present in samples before 2013. We compiled junction data into a resource called intropolis available at http://intropolis.rail.bio. We used this resource to search for a recently validated isoform of the ALK gene and characterized the potential functional implications of unannotated junctions with publicly available TRAP-seq data","tags":[],"title":"Human splicing diversity and the extent of unannotated splice junctions across human RNA-seq samples on the Sequence Read Archive","type":"publication"},{"authors":["Abhinav Nellore","Leonardo Collado-Torres","Andrew E Jaffe","**José Alquicira-Hernández**","Christopher Wilks","Jacob Pritt","James Morton","Jeffrey T Leek","Ben Langmead"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1472652000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1472652000,"objectID":"a5144f204bcbbfba0ec2badbb1af7356","permalink":"/publication/rail/","publishdate":"2016-09-01T00:00:00+10:00","relpermalink":"/publication/rail/","section":"publication","summary":"We describe Rail-RNA, a cloud-enabled spliced aligner that analyzes many samples at once. Rail-RNA eliminates redundant work across samples, making it more efficient as samples are added. For many samples, Rail-RNA is more accurate than annotation-assisted aligners. We use Rail-RNA to align 667 RNA-seq samples from the GEUVADIS project on Amazon Web Services in under 16h for US$0.91 per sample. Rail-RNA outputs alignments in SAM/BAM format; but it also outputs (i) base-level coverage bigWigs for each sample; (ii) coverage bigWigs encoding normalized mean and median coverages at each base across samples analyzed; and (iii) exon–exon splice junctions and indels (features) in columnar formats that juxtapose coverages in samples in which a given feature is found. Supplementary outputs are ready for use with downstream packages for reproducible statistical analysis. We use Rail-RNA to identify expressed regions in the GEUVADIS samples and show that both annotated and unannotated (novel) expressed regions exhibit consistent patterns of variation across populations and with respect to known confounding variables.","tags":[],"title":"Rail-RNA: scalable analysis of RNA-seq splicing and coverage","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]